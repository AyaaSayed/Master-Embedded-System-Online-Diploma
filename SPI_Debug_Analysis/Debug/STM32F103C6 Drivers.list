
STM32F103C6 Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013c0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080014f0  080014f0  000114f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001518  08001518  00011520  2**0
                  CONTENTS
  4 .ARM          00000000  08001518  08001518  00011520  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001518  08001520  00011520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001518  08001518  00011518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800151c  0800151c  0001151c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000000  08001520  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08001520  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011520  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c637  00000000  00000000  00011549  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001006  00000000  00000000  0001db80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d50  00000000  00000000  0001eb86  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000250  00000000  00000000  0001f8d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001d8  00000000  00000000  0001fb28  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00003001  00000000  00000000  0001fd00  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000033df  00000000  00000000  00022d01  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b8bb  00000000  00000000  000260e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0003199b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000071c  00000000  00000000  00031a18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080014d8 	.word	0x080014d8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080014d8 	.word	0x080014d8

08000170 <USART1_CallBack>:

/*******************************************************************************
                                  APP Function
*******************************************************************************/
void USART1_CallBack(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
#ifdef MCU_Act_As_Master
	MCAL_UART_ReceiveData(USART1, &data, Interrupt_Mechanism);
 8000174:	2200      	movs	r2, #0
 8000176:	490f      	ldr	r1, [pc, #60]	; (80001b4 <USART1_CallBack+0x44>)
 8000178:	480f      	ldr	r0, [pc, #60]	; (80001b8 <USART1_CallBack+0x48>)
 800017a:	f001 f8d1 	bl	8001320 <MCAL_UART_ReceiveData>
	MCAL_UART_SendData   (USART1, &data, Polling_Mechanism);
 800017e:	2201      	movs	r2, #1
 8000180:	490c      	ldr	r1, [pc, #48]	; (80001b4 <USART1_CallBack+0x44>)
 8000182:	480d      	ldr	r0, [pc, #52]	; (80001b8 <USART1_CallBack+0x48>)
 8000184:	f001 f87a 	bl	800127c <MCAL_UART_SendData>

	//Send to SPI1
	MCAL_GPIO_WritePin(GPIOA, SPI_GPIO_Pins[SPI1_Index][SPIx_NSS_Index], FALSE);
 8000188:	4b0c      	ldr	r3, [pc, #48]	; (80001bc <USART1_CallBack+0x4c>)
 800018a:	881b      	ldrh	r3, [r3, #0]
 800018c:	2200      	movs	r2, #0
 800018e:	4619      	mov	r1, r3
 8000190:	480b      	ldr	r0, [pc, #44]	; (80001c0 <USART1_CallBack+0x50>)
 8000192:	f000 fbfb 	bl	800098c <MCAL_GPIO_WritePin>
	MCAL_SPI_TX_RX(SPI1, &data, Polling_Mechanism);
 8000196:	2201      	movs	r2, #1
 8000198:	4906      	ldr	r1, [pc, #24]	; (80001b4 <USART1_CallBack+0x44>)
 800019a:	480a      	ldr	r0, [pc, #40]	; (80001c4 <USART1_CallBack+0x54>)
 800019c:	f000 fdb4 	bl	8000d08 <MCAL_SPI_TX_RX>
	MCAL_GPIO_WritePin(GPIOA, SPI_GPIO_Pins[SPI1_Index][SPIx_NSS_Index], TRUE );
 80001a0:	4b06      	ldr	r3, [pc, #24]	; (80001bc <USART1_CallBack+0x4c>)
 80001a2:	881b      	ldrh	r3, [r3, #0]
 80001a4:	2201      	movs	r2, #1
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <USART1_CallBack+0x50>)
 80001aa:	f000 fbef 	bl	800098c <MCAL_GPIO_WritePin>
#endif
}
 80001ae:	bf00      	nop
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	20000030 	.word	0x20000030
 80001b8:	40013800 	.word	0x40013800
 80001bc:	080014f0 	.word	0x080014f0
 80001c0:	40010800 	.word	0x40010800
 80001c4:	40013000 	.word	0x40013000

080001c8 <SPI_Debug_Analysis_Using_UART1_Interrupt>:


void SPI_Debug_Analysis_Using_UART1_Interrupt(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
 80001cc:	af00      	add	r7, sp, #0
	/************************************************************/
	// Configuration of USART1
	USART_Config_t UART1_Config;
	UART1_Config.BaudRate       = UART_BaudRate_115200;
 80001ce:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80001d2:	61bb      	str	r3, [r7, #24]
	UART1_Config.HW_FlowControl = UART_HW_FlowControl_NONE;
 80001d4:	2300      	movs	r3, #0
 80001d6:	77fb      	strb	r3, [r7, #31]
	UART1_Config.IRQ_Enable     = UART_IRQ_Enable_RXNEIE;
 80001d8:	2303      	movs	r3, #3
 80001da:	f887 3020 	strb.w	r3, [r7, #32]
	UART1_Config.P_IRQ_CallBack = USART1_CallBack;
 80001de:	4b21      	ldr	r3, [pc, #132]	; (8000264 <SPI_Debug_Analysis_Using_UART1_Interrupt+0x9c>)
 80001e0:	627b      	str	r3, [r7, #36]	; 0x24
	UART1_Config.Parity         = UART_Parity_Disable;
 80001e2:	2301      	movs	r3, #1
 80001e4:	777b      	strb	r3, [r7, #29]
	UART1_Config.Payload_Length = UART_Payload_Length_8B;
 80001e6:	2300      	movs	r3, #0
 80001e8:	773b      	strb	r3, [r7, #28]
	UART1_Config.StopBits       = UART_StopBits_1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	77bb      	strb	r3, [r7, #30]
	UART1_Config.USART_Mode     = UART_Mode_TX_RX;
 80001ee:	2303      	movs	r3, #3
 80001f0:	753b      	strb	r3, [r7, #20]

	MCAL_UART_Init(USART1, &UART1_Config);
 80001f2:	f107 0314 	add.w	r3, r7, #20
 80001f6:	4619      	mov	r1, r3
 80001f8:	481b      	ldr	r0, [pc, #108]	; (8000268 <SPI_Debug_Analysis_Using_UART1_Interrupt+0xa0>)
 80001fa:	f000 fe8b 	bl	8000f14 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 80001fe:	481a      	ldr	r0, [pc, #104]	; (8000268 <SPI_Debug_Analysis_Using_UART1_Interrupt+0xa0>)
 8000200:	f000 ffa6 	bl	8001150 <MCAL_UART_GPIO_Set_Pins>

    /************************************************************/
	// Configuration of SPI1
	SPI_Config_t SPI1_Config;
	SPI1_Config.CLK_Phase          = SPI_CLK_PHASE_SECOND;
 8000204:	2301      	movs	r3, #1
 8000206:	727b      	strb	r3, [r7, #9]
	SPI1_Config.CLK_Polarity       = SPI_CLK_POLARITY_IDLE_HIGH;
 8000208:	2301      	movs	r3, #1
 800020a:	723b      	strb	r3, [r7, #8]
	SPI1_Config.Frame_Size         = SPI_FRAME_SIZE_8BIT;
 800020c:	2300      	movs	r3, #0
 800020e:	71fb      	strb	r3, [r7, #7]
	SPI1_Config.Frame_Format       = SPI_FRAME_FORMAT_MSB_FIRST;
 8000210:	2300      	movs	r3, #0
 8000212:	71bb      	strb	r3, [r7, #6]
	SPI1_Config.BaudRate_Prescaler = SPI_BAUDERATE_PRESCALER_8;    //Assume by default PCLK2 is 8MHZ
 8000214:	2302      	movs	r3, #2
 8000216:	72fb      	strb	r3, [r7, #11]
	SPI1_Config.Communication_Mode = SPI_COMMUNICATION_MODE_2LINE_FULL_DUPLEX;
 8000218:	2300      	movs	r3, #0
 800021a:	717b      	strb	r3, [r7, #5]

#ifdef MCU_Act_As_Master
	SPI1_Config.SPI_Mode       = SPI_MODE_MASTER;
 800021c:	2301      	movs	r3, #1
 800021e:	713b      	strb	r3, [r7, #4]
	SPI1_Config.NSS            = SPI_NSS_SW_SSI_SET;
 8000220:	2303      	movs	r3, #3
 8000222:	72bb      	strb	r3, [r7, #10]
	SPI1_Config.IRQ_Enable     = SPI_IRQ_ENABLE_NONE;
 8000224:	2300      	movs	r3, #0
 8000226:	733b      	strb	r3, [r7, #12]
	SPI1_Config.P_IRQ_CallBack = NULL;
 8000228:	2300      	movs	r3, #0
 800022a:	613b      	str	r3, [r7, #16]

	//Configure SS on PA4 by GPIO
	GPIO_PinConfig_t Pin_Config;
	Pin_Config.GPIO_PinNumber    = SPI_GPIO_Pins[SPI1_Index][SPIx_NSS_Index];
 800022c:	4b0f      	ldr	r3, [pc, #60]	; (800026c <SPI_Debug_Analysis_Using_UART1_Interrupt+0xa4>)
 800022e:	881b      	ldrh	r3, [r3, #0]
 8000230:	803b      	strh	r3, [r7, #0]
	Pin_Config.GPIO_MODE         = GPIO_MODE_Output_pp;
 8000232:	2304      	movs	r3, #4
 8000234:	70bb      	strb	r3, [r7, #2]
	Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000236:	2301      	movs	r3, #1
 8000238:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_Init(GPIOA, &Pin_Config);
 800023a:	463b      	mov	r3, r7
 800023c:	4619      	mov	r1, r3
 800023e:	480c      	ldr	r0, [pc, #48]	; (8000270 <SPI_Debug_Analysis_Using_UART1_Interrupt+0xa8>)
 8000240:	f000 fb26 	bl	8000890 <MCAL_GPIO_Init>
#endif

	MCAL_SPI_Init(SPI1, &SPI1_Config);
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	4619      	mov	r1, r3
 8000248:	480a      	ldr	r0, [pc, #40]	; (8000274 <SPI_Debug_Analysis_Using_UART1_Interrupt+0xac>)
 800024a:	f000 fc53 	bl	8000af4 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 800024e:	4809      	ldr	r0, [pc, #36]	; (8000274 <SPI_Debug_Analysis_Using_UART1_Interrupt+0xac>)
 8000250:	f000 fd88 	bl	8000d64 <MCAL_SPI_GPIO_Set_Pins>


    //Force the slave select (High) Idle Mode
	MCAL_GPIO_WritePin(GPIOA, SPI_GPIO_Pins[SPI1_Index][SPIx_NSS_Index], TRUE);
 8000254:	4b05      	ldr	r3, [pc, #20]	; (800026c <SPI_Debug_Analysis_Using_UART1_Interrupt+0xa4>)
 8000256:	881b      	ldrh	r3, [r3, #0]
 8000258:	2201      	movs	r2, #1
 800025a:	4619      	mov	r1, r3
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <SPI_Debug_Analysis_Using_UART1_Interrupt+0xa8>)
 800025e:	f000 fb95 	bl	800098c <MCAL_GPIO_WritePin>

	while(1);
 8000262:	e7fe      	b.n	8000262 <SPI_Debug_Analysis_Using_UART1_Interrupt+0x9a>
 8000264:	08000171 	.word	0x08000171
 8000268:	40013800 	.word	0x40013800
 800026c:	080014f0 	.word	0x080014f0
 8000270:	40010800 	.word	0x40010800
 8000274:	40013000 	.word	0x40013000

08000278 <EXTI0_IRQHandler>:

/*******************************************************************************
                                  IRQ Handlers
*******************************************************************************/
void EXTI0_IRQHandler()
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	//This bit is cleared by writing a ‘1’ into the bit
	EXTI->PR._PR |= (1<<EXTI0);
 800027c:	4b07      	ldr	r3, [pc, #28]	; (800029c <EXTI0_IRQHandler+0x24>)
 800027e:	695b      	ldr	r3, [r3, #20]
 8000280:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000284:	4a05      	ldr	r2, [pc, #20]	; (800029c <EXTI0_IRQHandler+0x24>)
 8000286:	f043 0101 	orr.w	r1, r3, #1
 800028a:	6953      	ldr	r3, [r2, #20]
 800028c:	f361 0313 	bfi	r3, r1, #0, #20
 8000290:	6153      	str	r3, [r2, #20]

	//Call Back C function() which will be called once IRQ happen
	GP_IRQCallBack[EXTI0]();
 8000292:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <EXTI0_IRQHandler+0x28>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4798      	blx	r3
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40010400 	.word	0x40010400
 80002a0:	20000034 	.word	0x20000034

080002a4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler()
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	//This bit is cleared by writing a ‘1’ into the bit
	EXTI->PR._PR |= (1<<EXTI1);
 80002a8:	4b07      	ldr	r3, [pc, #28]	; (80002c8 <EXTI1_IRQHandler+0x24>)
 80002aa:	695b      	ldr	r3, [r3, #20]
 80002ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80002b0:	4a05      	ldr	r2, [pc, #20]	; (80002c8 <EXTI1_IRQHandler+0x24>)
 80002b2:	f043 0102 	orr.w	r1, r3, #2
 80002b6:	6953      	ldr	r3, [r2, #20]
 80002b8:	f361 0313 	bfi	r3, r1, #0, #20
 80002bc:	6153      	str	r3, [r2, #20]

	//Call Back C function() which will be called once IRQ happen
	GP_IRQCallBack[EXTI2]();
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <EXTI1_IRQHandler+0x28>)
 80002c0:	689b      	ldr	r3, [r3, #8]
 80002c2:	4798      	blx	r3
}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	40010400 	.word	0x40010400
 80002cc:	20000034 	.word	0x20000034

080002d0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler()
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	//This bit is cleared by writing a ‘1’ into the bit
	EXTI->PR._PR |= (1<<EXTI2);
 80002d4:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <EXTI2_IRQHandler+0x24>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80002dc:	4a05      	ldr	r2, [pc, #20]	; (80002f4 <EXTI2_IRQHandler+0x24>)
 80002de:	f043 0104 	orr.w	r1, r3, #4
 80002e2:	6953      	ldr	r3, [r2, #20]
 80002e4:	f361 0313 	bfi	r3, r1, #0, #20
 80002e8:	6153      	str	r3, [r2, #20]

	//Call Back C function() which will be called once IRQ happen
	GP_IRQCallBack[EXTI2]();
 80002ea:	4b03      	ldr	r3, [pc, #12]	; (80002f8 <EXTI2_IRQHandler+0x28>)
 80002ec:	689b      	ldr	r3, [r3, #8]
 80002ee:	4798      	blx	r3
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	40010400 	.word	0x40010400
 80002f8:	20000034 	.word	0x20000034

080002fc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler()
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	//This bit is cleared by writing a ‘1’ into the bit
	EXTI->PR._PR |= (1<<EXTI3);
 8000300:	4b07      	ldr	r3, [pc, #28]	; (8000320 <EXTI3_IRQHandler+0x24>)
 8000302:	695b      	ldr	r3, [r3, #20]
 8000304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000308:	4a05      	ldr	r2, [pc, #20]	; (8000320 <EXTI3_IRQHandler+0x24>)
 800030a:	f043 0108 	orr.w	r1, r3, #8
 800030e:	6953      	ldr	r3, [r2, #20]
 8000310:	f361 0313 	bfi	r3, r1, #0, #20
 8000314:	6153      	str	r3, [r2, #20]

	//Call Back C function() which will be called once IRQ happen
	GP_IRQCallBack[EXTI3]();
 8000316:	4b03      	ldr	r3, [pc, #12]	; (8000324 <EXTI3_IRQHandler+0x28>)
 8000318:	68db      	ldr	r3, [r3, #12]
 800031a:	4798      	blx	r3
}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	40010400 	.word	0x40010400
 8000324:	20000034 	.word	0x20000034

08000328 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler()
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	//This bit is cleared by writing a ‘1’ into the bit
	EXTI->PR._PR |= (1<<EXTI4);
 800032c:	4b07      	ldr	r3, [pc, #28]	; (800034c <EXTI4_IRQHandler+0x24>)
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000334:	4a05      	ldr	r2, [pc, #20]	; (800034c <EXTI4_IRQHandler+0x24>)
 8000336:	f043 0110 	orr.w	r1, r3, #16
 800033a:	6953      	ldr	r3, [r2, #20]
 800033c:	f361 0313 	bfi	r3, r1, #0, #20
 8000340:	6153      	str	r3, [r2, #20]

	//Call Back C function() which will be called once IRQ happen
	GP_IRQCallBack[EXTI4]();
 8000342:	4b03      	ldr	r3, [pc, #12]	; (8000350 <EXTI4_IRQHandler+0x28>)
 8000344:	691b      	ldr	r3, [r3, #16]
 8000346:	4798      	blx	r3
}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}
 800034c:	40010400 	.word	0x40010400
 8000350:	20000034 	.word	0x20000034

08000354 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler()
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	//Call Back C function() which will be called once IRQ happen
	if      (EXTI->PR._PR & (1 << EXTI5)) {EXTI->PR._PR |= (1<<EXTI5);  GP_IRQCallBack[EXTI5]();}
 8000358:	4b39      	ldr	r3, [pc, #228]	; (8000440 <EXTI9_5_IRQHandler+0xec>)
 800035a:	695b      	ldr	r3, [r3, #20]
 800035c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000360:	f003 0320 	and.w	r3, r3, #32
 8000364:	2b00      	cmp	r3, #0
 8000366:	d00e      	beq.n	8000386 <EXTI9_5_IRQHandler+0x32>
 8000368:	4b35      	ldr	r3, [pc, #212]	; (8000440 <EXTI9_5_IRQHandler+0xec>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000370:	4a33      	ldr	r2, [pc, #204]	; (8000440 <EXTI9_5_IRQHandler+0xec>)
 8000372:	f043 0120 	orr.w	r1, r3, #32
 8000376:	6953      	ldr	r3, [r2, #20]
 8000378:	f361 0313 	bfi	r3, r1, #0, #20
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b31      	ldr	r3, [pc, #196]	; (8000444 <EXTI9_5_IRQHandler+0xf0>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	4798      	blx	r3
	else if (EXTI->PR._PR & (1 << EXTI6)) {EXTI->PR._PR |= (1<<EXTI6);  GP_IRQCallBack[EXTI6]();}
	else if (EXTI->PR._PR & (1 << EXTI7)) {EXTI->PR._PR |= (1<<EXTI7);  GP_IRQCallBack[EXTI7]();}
	else if (EXTI->PR._PR & (1 << EXTI8)) {EXTI->PR._PR |= (1<<EXTI8);  GP_IRQCallBack[EXTI8]();}
	else if (EXTI->PR._PR & (1 << EXTI9)) {EXTI->PR._PR |= (1<<EXTI9);  GP_IRQCallBack[EXTI9]();}
}
 8000384:	e05a      	b.n	800043c <EXTI9_5_IRQHandler+0xe8>
	else if (EXTI->PR._PR & (1 << EXTI6)) {EXTI->PR._PR |= (1<<EXTI6);  GP_IRQCallBack[EXTI6]();}
 8000386:	4b2e      	ldr	r3, [pc, #184]	; (8000440 <EXTI9_5_IRQHandler+0xec>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800038e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000392:	2b00      	cmp	r3, #0
 8000394:	d00e      	beq.n	80003b4 <EXTI9_5_IRQHandler+0x60>
 8000396:	4b2a      	ldr	r3, [pc, #168]	; (8000440 <EXTI9_5_IRQHandler+0xec>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800039e:	4a28      	ldr	r2, [pc, #160]	; (8000440 <EXTI9_5_IRQHandler+0xec>)
 80003a0:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 80003a4:	6953      	ldr	r3, [r2, #20]
 80003a6:	f361 0313 	bfi	r3, r1, #0, #20
 80003aa:	6153      	str	r3, [r2, #20]
 80003ac:	4b25      	ldr	r3, [pc, #148]	; (8000444 <EXTI9_5_IRQHandler+0xf0>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4798      	blx	r3
}
 80003b2:	e043      	b.n	800043c <EXTI9_5_IRQHandler+0xe8>
	else if (EXTI->PR._PR & (1 << EXTI7)) {EXTI->PR._PR |= (1<<EXTI7);  GP_IRQCallBack[EXTI7]();}
 80003b4:	4b22      	ldr	r3, [pc, #136]	; (8000440 <EXTI9_5_IRQHandler+0xec>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80003bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d00e      	beq.n	80003e2 <EXTI9_5_IRQHandler+0x8e>
 80003c4:	4b1e      	ldr	r3, [pc, #120]	; (8000440 <EXTI9_5_IRQHandler+0xec>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80003cc:	4a1c      	ldr	r2, [pc, #112]	; (8000440 <EXTI9_5_IRQHandler+0xec>)
 80003ce:	f043 0180 	orr.w	r1, r3, #128	; 0x80
 80003d2:	6953      	ldr	r3, [r2, #20]
 80003d4:	f361 0313 	bfi	r3, r1, #0, #20
 80003d8:	6153      	str	r3, [r2, #20]
 80003da:	4b1a      	ldr	r3, [pc, #104]	; (8000444 <EXTI9_5_IRQHandler+0xf0>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	4798      	blx	r3
}
 80003e0:	e02c      	b.n	800043c <EXTI9_5_IRQHandler+0xe8>
	else if (EXTI->PR._PR & (1 << EXTI8)) {EXTI->PR._PR |= (1<<EXTI8);  GP_IRQCallBack[EXTI8]();}
 80003e2:	4b17      	ldr	r3, [pc, #92]	; (8000440 <EXTI9_5_IRQHandler+0xec>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80003ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d00e      	beq.n	8000410 <EXTI9_5_IRQHandler+0xbc>
 80003f2:	4b13      	ldr	r3, [pc, #76]	; (8000440 <EXTI9_5_IRQHandler+0xec>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80003fa:	4a11      	ldr	r2, [pc, #68]	; (8000440 <EXTI9_5_IRQHandler+0xec>)
 80003fc:	f443 7180 	orr.w	r1, r3, #256	; 0x100
 8000400:	6953      	ldr	r3, [r2, #20]
 8000402:	f361 0313 	bfi	r3, r1, #0, #20
 8000406:	6153      	str	r3, [r2, #20]
 8000408:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <EXTI9_5_IRQHandler+0xf0>)
 800040a:	6a1b      	ldr	r3, [r3, #32]
 800040c:	4798      	blx	r3
}
 800040e:	e015      	b.n	800043c <EXTI9_5_IRQHandler+0xe8>
	else if (EXTI->PR._PR & (1 << EXTI9)) {EXTI->PR._PR |= (1<<EXTI9);  GP_IRQCallBack[EXTI9]();}
 8000410:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <EXTI9_5_IRQHandler+0xec>)
 8000412:	695b      	ldr	r3, [r3, #20]
 8000414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000418:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800041c:	2b00      	cmp	r3, #0
 800041e:	d00d      	beq.n	800043c <EXTI9_5_IRQHandler+0xe8>
 8000420:	4b07      	ldr	r3, [pc, #28]	; (8000440 <EXTI9_5_IRQHandler+0xec>)
 8000422:	695b      	ldr	r3, [r3, #20]
 8000424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000428:	4a05      	ldr	r2, [pc, #20]	; (8000440 <EXTI9_5_IRQHandler+0xec>)
 800042a:	f443 7100 	orr.w	r1, r3, #512	; 0x200
 800042e:	6953      	ldr	r3, [r2, #20]
 8000430:	f361 0313 	bfi	r3, r1, #0, #20
 8000434:	6153      	str	r3, [r2, #20]
 8000436:	4b03      	ldr	r3, [pc, #12]	; (8000444 <EXTI9_5_IRQHandler+0xf0>)
 8000438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800043a:	4798      	blx	r3
}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40010400 	.word	0x40010400
 8000444:	20000034 	.word	0x20000034

08000448 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler()
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	//Call Back C function() which will be called once IRQ happen
	if      (EXTI->PR._PR & (1 << EXTI10)) {EXTI->PR._PR |= (1<<EXTI10);  GP_IRQCallBack[EXTI10]();}
 800044c:	4b45      	ldr	r3, [pc, #276]	; (8000564 <EXTI15_10_IRQHandler+0x11c>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000458:	2b00      	cmp	r3, #0
 800045a:	d00e      	beq.n	800047a <EXTI15_10_IRQHandler+0x32>
 800045c:	4b41      	ldr	r3, [pc, #260]	; (8000564 <EXTI15_10_IRQHandler+0x11c>)
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000464:	4a3f      	ldr	r2, [pc, #252]	; (8000564 <EXTI15_10_IRQHandler+0x11c>)
 8000466:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 800046a:	6953      	ldr	r3, [r2, #20]
 800046c:	f361 0313 	bfi	r3, r1, #0, #20
 8000470:	6153      	str	r3, [r2, #20]
 8000472:	4b3d      	ldr	r3, [pc, #244]	; (8000568 <EXTI15_10_IRQHandler+0x120>)
 8000474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000476:	4798      	blx	r3
	else if (EXTI->PR._PR & (1 << EXTI11)) {EXTI->PR._PR |= (1<<EXTI11);  GP_IRQCallBack[EXTI11]();}
	else if (EXTI->PR._PR & (1 << EXTI12)) {EXTI->PR._PR |= (1<<EXTI12);  GP_IRQCallBack[EXTI12]();}
	else if (EXTI->PR._PR & (1 << EXTI13)) {EXTI->PR._PR |= (1<<EXTI13);  GP_IRQCallBack[EXTI13]();}
	else if (EXTI->PR._PR & (1 << EXTI14)) {EXTI->PR._PR |= (1<<EXTI14);  GP_IRQCallBack[EXTI14]();}
	else if (EXTI->PR._PR & (1 << EXTI15)) {EXTI->PR._PR |= (1<<EXTI15);  GP_IRQCallBack[EXTI15]();}
}
 8000478:	e071      	b.n	800055e <EXTI15_10_IRQHandler+0x116>
	else if (EXTI->PR._PR & (1 << EXTI11)) {EXTI->PR._PR |= (1<<EXTI11);  GP_IRQCallBack[EXTI11]();}
 800047a:	4b3a      	ldr	r3, [pc, #232]	; (8000564 <EXTI15_10_IRQHandler+0x11c>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000482:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000486:	2b00      	cmp	r3, #0
 8000488:	d00e      	beq.n	80004a8 <EXTI15_10_IRQHandler+0x60>
 800048a:	4b36      	ldr	r3, [pc, #216]	; (8000564 <EXTI15_10_IRQHandler+0x11c>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000492:	4a34      	ldr	r2, [pc, #208]	; (8000564 <EXTI15_10_IRQHandler+0x11c>)
 8000494:	f443 6100 	orr.w	r1, r3, #2048	; 0x800
 8000498:	6953      	ldr	r3, [r2, #20]
 800049a:	f361 0313 	bfi	r3, r1, #0, #20
 800049e:	6153      	str	r3, [r2, #20]
 80004a0:	4b31      	ldr	r3, [pc, #196]	; (8000568 <EXTI15_10_IRQHandler+0x120>)
 80004a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004a4:	4798      	blx	r3
}
 80004a6:	e05a      	b.n	800055e <EXTI15_10_IRQHandler+0x116>
	else if (EXTI->PR._PR & (1 << EXTI12)) {EXTI->PR._PR |= (1<<EXTI12);  GP_IRQCallBack[EXTI12]();}
 80004a8:	4b2e      	ldr	r3, [pc, #184]	; (8000564 <EXTI15_10_IRQHandler+0x11c>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80004b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d00e      	beq.n	80004d6 <EXTI15_10_IRQHandler+0x8e>
 80004b8:	4b2a      	ldr	r3, [pc, #168]	; (8000564 <EXTI15_10_IRQHandler+0x11c>)
 80004ba:	695b      	ldr	r3, [r3, #20]
 80004bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80004c0:	4a28      	ldr	r2, [pc, #160]	; (8000564 <EXTI15_10_IRQHandler+0x11c>)
 80004c2:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
 80004c6:	6953      	ldr	r3, [r2, #20]
 80004c8:	f361 0313 	bfi	r3, r1, #0, #20
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b26      	ldr	r3, [pc, #152]	; (8000568 <EXTI15_10_IRQHandler+0x120>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d2:	4798      	blx	r3
}
 80004d4:	e043      	b.n	800055e <EXTI15_10_IRQHandler+0x116>
	else if (EXTI->PR._PR & (1 << EXTI13)) {EXTI->PR._PR |= (1<<EXTI13);  GP_IRQCallBack[EXTI13]();}
 80004d6:	4b23      	ldr	r3, [pc, #140]	; (8000564 <EXTI15_10_IRQHandler+0x11c>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80004de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d00e      	beq.n	8000504 <EXTI15_10_IRQHandler+0xbc>
 80004e6:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <EXTI15_10_IRQHandler+0x11c>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80004ee:	4a1d      	ldr	r2, [pc, #116]	; (8000564 <EXTI15_10_IRQHandler+0x11c>)
 80004f0:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
 80004f4:	6953      	ldr	r3, [r2, #20]
 80004f6:	f361 0313 	bfi	r3, r1, #0, #20
 80004fa:	6153      	str	r3, [r2, #20]
 80004fc:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <EXTI15_10_IRQHandler+0x120>)
 80004fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000500:	4798      	blx	r3
}
 8000502:	e02c      	b.n	800055e <EXTI15_10_IRQHandler+0x116>
	else if (EXTI->PR._PR & (1 << EXTI14)) {EXTI->PR._PR |= (1<<EXTI14);  GP_IRQCallBack[EXTI14]();}
 8000504:	4b17      	ldr	r3, [pc, #92]	; (8000564 <EXTI15_10_IRQHandler+0x11c>)
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800050c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000510:	2b00      	cmp	r3, #0
 8000512:	d00e      	beq.n	8000532 <EXTI15_10_IRQHandler+0xea>
 8000514:	4b13      	ldr	r3, [pc, #76]	; (8000564 <EXTI15_10_IRQHandler+0x11c>)
 8000516:	695b      	ldr	r3, [r3, #20]
 8000518:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800051c:	4a11      	ldr	r2, [pc, #68]	; (8000564 <EXTI15_10_IRQHandler+0x11c>)
 800051e:	f443 4180 	orr.w	r1, r3, #16384	; 0x4000
 8000522:	6953      	ldr	r3, [r2, #20]
 8000524:	f361 0313 	bfi	r3, r1, #0, #20
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <EXTI15_10_IRQHandler+0x120>)
 800052c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800052e:	4798      	blx	r3
}
 8000530:	e015      	b.n	800055e <EXTI15_10_IRQHandler+0x116>
	else if (EXTI->PR._PR & (1 << EXTI15)) {EXTI->PR._PR |= (1<<EXTI15);  GP_IRQCallBack[EXTI15]();}
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <EXTI15_10_IRQHandler+0x11c>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800053a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800053e:	2b00      	cmp	r3, #0
 8000540:	d00d      	beq.n	800055e <EXTI15_10_IRQHandler+0x116>
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <EXTI15_10_IRQHandler+0x11c>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800054a:	4a06      	ldr	r2, [pc, #24]	; (8000564 <EXTI15_10_IRQHandler+0x11c>)
 800054c:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8000550:	6953      	ldr	r3, [r2, #20]
 8000552:	f361 0313 	bfi	r3, r1, #0, #20
 8000556:	6153      	str	r3, [r2, #20]
 8000558:	4b03      	ldr	r3, [pc, #12]	; (8000568 <EXTI15_10_IRQHandler+0x120>)
 800055a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800055c:	4798      	blx	r3
}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40010400 	.word	0x40010400
 8000568:	20000034 	.word	0x20000034

0800056c <ConfigurationPin>:

/*******************************************************************************
                      APIs Supported by "MCAL GPIO DRIVER"
*******************************************************************************/
void ConfigurationPin(GPIO_t* GPIOx , GPIO_PinConfig_t* PinConfig , uint8_t Configuration , uint8_t PinModeMask)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	4611      	mov	r1, r2
 8000578:	461a      	mov	r2, r3
 800057a:	460b      	mov	r3, r1
 800057c:	71fb      	strb	r3, [r7, #7]
 800057e:	4613      	mov	r3, r2
 8000580:	71bb      	strb	r3, [r7, #6]
	if (Configuration == LOW)
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	2b00      	cmp	r3, #0
 8000586:	f040 80ba 	bne.w	80006fe <ConfigurationPin+0x192>
	{
		switch(PinConfig->GPIO_PinNumber){
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	2b08      	cmp	r3, #8
 8000590:	d051      	beq.n	8000636 <ConfigurationPin+0xca>
 8000592:	2b08      	cmp	r3, #8
 8000594:	dc06      	bgt.n	80005a4 <ConfigurationPin+0x38>
 8000596:	2b02      	cmp	r3, #2
 8000598:	d025      	beq.n	80005e6 <ConfigurationPin+0x7a>
 800059a:	2b04      	cmp	r3, #4
 800059c:	d037      	beq.n	800060e <ConfigurationPin+0xa2>
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d00d      	beq.n	80005be <ConfigurationPin+0x52>
				break;
			case GPIO_PIN_7:
				GPIOx->CRL.CNF7  = PinModeMask;
				GPIOx->CRL.MODE7 = PinConfig->GPIO_OUTPUT_SPEED;
				break;
			default:break;
 80005a2:	e170      	b.n	8000886 <ConfigurationPin+0x31a>
		switch(PinConfig->GPIO_PinNumber){
 80005a4:	2b20      	cmp	r3, #32
 80005a6:	d06e      	beq.n	8000686 <ConfigurationPin+0x11a>
 80005a8:	2b20      	cmp	r3, #32
 80005aa:	dc02      	bgt.n	80005b2 <ConfigurationPin+0x46>
 80005ac:	2b10      	cmp	r3, #16
 80005ae:	d056      	beq.n	800065e <ConfigurationPin+0xf2>
			default:break;
 80005b0:	e169      	b.n	8000886 <ConfigurationPin+0x31a>
		switch(PinConfig->GPIO_PinNumber){
 80005b2:	2b40      	cmp	r3, #64	; 0x40
 80005b4:	d07b      	beq.n	80006ae <ConfigurationPin+0x142>
 80005b6:	2b80      	cmp	r3, #128	; 0x80
 80005b8:	f000 808d 	beq.w	80006d6 <ConfigurationPin+0x16a>
			default:break;
 80005bc:	e163      	b.n	8000886 <ConfigurationPin+0x31a>
				GPIOx->CRL.CNF0  = PinModeMask;
 80005be:	79bb      	ldrb	r3, [r7, #6]
 80005c0:	f003 0303 	and.w	r3, r3, #3
 80005c4:	b2d9      	uxtb	r1, r3
 80005c6:	68fa      	ldr	r2, [r7, #12]
 80005c8:	6813      	ldr	r3, [r2, #0]
 80005ca:	f361 0383 	bfi	r3, r1, #2, #2
 80005ce:	6013      	str	r3, [r2, #0]
				GPIOx->CRL.MODE0 = PinConfig->GPIO_OUTPUT_SPEED;
 80005d0:	68bb      	ldr	r3, [r7, #8]
 80005d2:	78db      	ldrb	r3, [r3, #3]
 80005d4:	f003 0303 	and.w	r3, r3, #3
 80005d8:	b2d9      	uxtb	r1, r3
 80005da:	68fa      	ldr	r2, [r7, #12]
 80005dc:	6813      	ldr	r3, [r2, #0]
 80005de:	f361 0301 	bfi	r3, r1, #0, #2
 80005e2:	6013      	str	r3, [r2, #0]
				break;
 80005e4:	e14f      	b.n	8000886 <ConfigurationPin+0x31a>
				GPIOx->CRL.CNF1  = PinModeMask;
 80005e6:	79bb      	ldrb	r3, [r7, #6]
 80005e8:	f003 0303 	and.w	r3, r3, #3
 80005ec:	b2d9      	uxtb	r1, r3
 80005ee:	68fa      	ldr	r2, [r7, #12]
 80005f0:	6813      	ldr	r3, [r2, #0]
 80005f2:	f361 1387 	bfi	r3, r1, #6, #2
 80005f6:	6013      	str	r3, [r2, #0]
				GPIOx->CRL.MODE1 = PinConfig->GPIO_OUTPUT_SPEED;
 80005f8:	68bb      	ldr	r3, [r7, #8]
 80005fa:	78db      	ldrb	r3, [r3, #3]
 80005fc:	f003 0303 	and.w	r3, r3, #3
 8000600:	b2d9      	uxtb	r1, r3
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	6813      	ldr	r3, [r2, #0]
 8000606:	f361 1305 	bfi	r3, r1, #4, #2
 800060a:	6013      	str	r3, [r2, #0]
				break;
 800060c:	e13b      	b.n	8000886 <ConfigurationPin+0x31a>
				GPIOx->CRL.CNF2  = PinModeMask;
 800060e:	79bb      	ldrb	r3, [r7, #6]
 8000610:	f003 0303 	and.w	r3, r3, #3
 8000614:	b2d9      	uxtb	r1, r3
 8000616:	68fa      	ldr	r2, [r7, #12]
 8000618:	6813      	ldr	r3, [r2, #0]
 800061a:	f361 238b 	bfi	r3, r1, #10, #2
 800061e:	6013      	str	r3, [r2, #0]
				GPIOx->CRL.MODE2 = PinConfig->GPIO_OUTPUT_SPEED;
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	78db      	ldrb	r3, [r3, #3]
 8000624:	f003 0303 	and.w	r3, r3, #3
 8000628:	b2d9      	uxtb	r1, r3
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	6813      	ldr	r3, [r2, #0]
 800062e:	f361 2309 	bfi	r3, r1, #8, #2
 8000632:	6013      	str	r3, [r2, #0]
				break;
 8000634:	e127      	b.n	8000886 <ConfigurationPin+0x31a>
				GPIOx->CRL.CNF3  = PinModeMask;
 8000636:	79bb      	ldrb	r3, [r7, #6]
 8000638:	f003 0303 	and.w	r3, r3, #3
 800063c:	b2d9      	uxtb	r1, r3
 800063e:	68fa      	ldr	r2, [r7, #12]
 8000640:	6813      	ldr	r3, [r2, #0]
 8000642:	f361 338f 	bfi	r3, r1, #14, #2
 8000646:	6013      	str	r3, [r2, #0]
				GPIOx->CRL.MODE3 = PinConfig->GPIO_OUTPUT_SPEED;
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	78db      	ldrb	r3, [r3, #3]
 800064c:	f003 0303 	and.w	r3, r3, #3
 8000650:	b2d9      	uxtb	r1, r3
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	6813      	ldr	r3, [r2, #0]
 8000656:	f361 330d 	bfi	r3, r1, #12, #2
 800065a:	6013      	str	r3, [r2, #0]
				break;
 800065c:	e113      	b.n	8000886 <ConfigurationPin+0x31a>
				GPIOx->CRL.CNF4  = PinModeMask;
 800065e:	79bb      	ldrb	r3, [r7, #6]
 8000660:	f003 0303 	and.w	r3, r3, #3
 8000664:	b2d9      	uxtb	r1, r3
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	6813      	ldr	r3, [r2, #0]
 800066a:	f361 4393 	bfi	r3, r1, #18, #2
 800066e:	6013      	str	r3, [r2, #0]
				GPIOx->CRL.MODE4 = PinConfig->GPIO_OUTPUT_SPEED;
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	78db      	ldrb	r3, [r3, #3]
 8000674:	f003 0303 	and.w	r3, r3, #3
 8000678:	b2d9      	uxtb	r1, r3
 800067a:	68fa      	ldr	r2, [r7, #12]
 800067c:	6813      	ldr	r3, [r2, #0]
 800067e:	f361 4311 	bfi	r3, r1, #16, #2
 8000682:	6013      	str	r3, [r2, #0]
				break;
 8000684:	e0ff      	b.n	8000886 <ConfigurationPin+0x31a>
				GPIOx->CRL.CNF5  = PinModeMask;
 8000686:	79bb      	ldrb	r3, [r7, #6]
 8000688:	f003 0303 	and.w	r3, r3, #3
 800068c:	b2d9      	uxtb	r1, r3
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	6813      	ldr	r3, [r2, #0]
 8000692:	f361 5397 	bfi	r3, r1, #22, #2
 8000696:	6013      	str	r3, [r2, #0]
				GPIOx->CRL.MODE5 = PinConfig->GPIO_OUTPUT_SPEED;
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	78db      	ldrb	r3, [r3, #3]
 800069c:	f003 0303 	and.w	r3, r3, #3
 80006a0:	b2d9      	uxtb	r1, r3
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	6813      	ldr	r3, [r2, #0]
 80006a6:	f361 5315 	bfi	r3, r1, #20, #2
 80006aa:	6013      	str	r3, [r2, #0]
				break;
 80006ac:	e0eb      	b.n	8000886 <ConfigurationPin+0x31a>
				GPIOx->CRL.CNF6  = PinModeMask;
 80006ae:	79bb      	ldrb	r3, [r7, #6]
 80006b0:	f003 0303 	and.w	r3, r3, #3
 80006b4:	b2d9      	uxtb	r1, r3
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	6813      	ldr	r3, [r2, #0]
 80006ba:	f361 639b 	bfi	r3, r1, #26, #2
 80006be:	6013      	str	r3, [r2, #0]
				GPIOx->CRL.MODE6 = PinConfig->GPIO_OUTPUT_SPEED;
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	78db      	ldrb	r3, [r3, #3]
 80006c4:	f003 0303 	and.w	r3, r3, #3
 80006c8:	b2d9      	uxtb	r1, r3
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	6813      	ldr	r3, [r2, #0]
 80006ce:	f361 6319 	bfi	r3, r1, #24, #2
 80006d2:	6013      	str	r3, [r2, #0]
				break;
 80006d4:	e0d7      	b.n	8000886 <ConfigurationPin+0x31a>
				GPIOx->CRL.CNF7  = PinModeMask;
 80006d6:	79bb      	ldrb	r3, [r7, #6]
 80006d8:	f003 0303 	and.w	r3, r3, #3
 80006dc:	b2d9      	uxtb	r1, r3
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	6813      	ldr	r3, [r2, #0]
 80006e2:	f361 739f 	bfi	r3, r1, #30, #2
 80006e6:	6013      	str	r3, [r2, #0]
				GPIOx->CRL.MODE7 = PinConfig->GPIO_OUTPUT_SPEED;
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	78db      	ldrb	r3, [r3, #3]
 80006ec:	f003 0303 	and.w	r3, r3, #3
 80006f0:	b2d9      	uxtb	r1, r3
 80006f2:	68fa      	ldr	r2, [r7, #12]
 80006f4:	6813      	ldr	r3, [r2, #0]
 80006f6:	f361 731d 	bfi	r3, r1, #28, #2
 80006fa:	6013      	str	r3, [r2, #0]
				break;
 80006fc:	e0c3      	b.n	8000886 <ConfigurationPin+0x31a>
		}
	}
	else
	{
		switch(PinConfig->GPIO_PinNumber) {
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000706:	d05a      	beq.n	80007be <ConfigurationPin+0x252>
 8000708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800070c:	dc09      	bgt.n	8000722 <ConfigurationPin+0x1b6>
 800070e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000712:	d02c      	beq.n	800076e <ConfigurationPin+0x202>
 8000714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000718:	d03d      	beq.n	8000796 <ConfigurationPin+0x22a>
 800071a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800071e:	d012      	beq.n	8000746 <ConfigurationPin+0x1da>
				break;
			case GPIO_PIN_15:
				GPIOx->CRH.CNF15  = PinModeMask;
				GPIOx->CRH.MODE15 = PinConfig->GPIO_OUTPUT_SPEED;
				break;
			default:break;
 8000720:	e0b1      	b.n	8000886 <ConfigurationPin+0x31a>
		switch(PinConfig->GPIO_PinNumber) {
 8000722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000726:	d072      	beq.n	800080e <ConfigurationPin+0x2a2>
 8000728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800072c:	dc03      	bgt.n	8000736 <ConfigurationPin+0x1ca>
 800072e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000732:	d058      	beq.n	80007e6 <ConfigurationPin+0x27a>
			default:break;
 8000734:	e0a7      	b.n	8000886 <ConfigurationPin+0x31a>
		switch(PinConfig->GPIO_PinNumber) {
 8000736:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800073a:	d07c      	beq.n	8000836 <ConfigurationPin+0x2ca>
 800073c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000740:	f000 808d 	beq.w	800085e <ConfigurationPin+0x2f2>
			default:break;
 8000744:	e09f      	b.n	8000886 <ConfigurationPin+0x31a>
				GPIOx->CRH.CNF8  = PinModeMask;
 8000746:	79bb      	ldrb	r3, [r7, #6]
 8000748:	f003 0303 	and.w	r3, r3, #3
 800074c:	b2d9      	uxtb	r1, r3
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	6853      	ldr	r3, [r2, #4]
 8000752:	f361 0383 	bfi	r3, r1, #2, #2
 8000756:	6053      	str	r3, [r2, #4]
				GPIOx->CRH.MODE8 = PinConfig->GPIO_OUTPUT_SPEED;
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	78db      	ldrb	r3, [r3, #3]
 800075c:	f003 0303 	and.w	r3, r3, #3
 8000760:	b2d9      	uxtb	r1, r3
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	6853      	ldr	r3, [r2, #4]
 8000766:	f361 0301 	bfi	r3, r1, #0, #2
 800076a:	6053      	str	r3, [r2, #4]
				break;
 800076c:	e08b      	b.n	8000886 <ConfigurationPin+0x31a>
				GPIOx->CRH.CNF9  = PinModeMask;
 800076e:	79bb      	ldrb	r3, [r7, #6]
 8000770:	f003 0303 	and.w	r3, r3, #3
 8000774:	b2d9      	uxtb	r1, r3
 8000776:	68fa      	ldr	r2, [r7, #12]
 8000778:	6853      	ldr	r3, [r2, #4]
 800077a:	f361 1387 	bfi	r3, r1, #6, #2
 800077e:	6053      	str	r3, [r2, #4]
				GPIOx->CRH.MODE9 = PinConfig->GPIO_OUTPUT_SPEED;;
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	78db      	ldrb	r3, [r3, #3]
 8000784:	f003 0303 	and.w	r3, r3, #3
 8000788:	b2d9      	uxtb	r1, r3
 800078a:	68fa      	ldr	r2, [r7, #12]
 800078c:	6853      	ldr	r3, [r2, #4]
 800078e:	f361 1305 	bfi	r3, r1, #4, #2
 8000792:	6053      	str	r3, [r2, #4]
				break;
 8000794:	e077      	b.n	8000886 <ConfigurationPin+0x31a>
				GPIOx->CRH.CNF10  = PinModeMask;
 8000796:	79bb      	ldrb	r3, [r7, #6]
 8000798:	f003 0303 	and.w	r3, r3, #3
 800079c:	b2d9      	uxtb	r1, r3
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	6853      	ldr	r3, [r2, #4]
 80007a2:	f361 238b 	bfi	r3, r1, #10, #2
 80007a6:	6053      	str	r3, [r2, #4]
				GPIOx->CRH.MODE10 = PinConfig->GPIO_OUTPUT_SPEED;
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	78db      	ldrb	r3, [r3, #3]
 80007ac:	f003 0303 	and.w	r3, r3, #3
 80007b0:	b2d9      	uxtb	r1, r3
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	6853      	ldr	r3, [r2, #4]
 80007b6:	f361 2309 	bfi	r3, r1, #8, #2
 80007ba:	6053      	str	r3, [r2, #4]
				break;
 80007bc:	e063      	b.n	8000886 <ConfigurationPin+0x31a>
				GPIOx->CRH.CNF11  = PinModeMask;
 80007be:	79bb      	ldrb	r3, [r7, #6]
 80007c0:	f003 0303 	and.w	r3, r3, #3
 80007c4:	b2d9      	uxtb	r1, r3
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	6853      	ldr	r3, [r2, #4]
 80007ca:	f361 338f 	bfi	r3, r1, #14, #2
 80007ce:	6053      	str	r3, [r2, #4]
				GPIOx->CRH.MODE11 = PinConfig->GPIO_OUTPUT_SPEED;
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	78db      	ldrb	r3, [r3, #3]
 80007d4:	f003 0303 	and.w	r3, r3, #3
 80007d8:	b2d9      	uxtb	r1, r3
 80007da:	68fa      	ldr	r2, [r7, #12]
 80007dc:	6853      	ldr	r3, [r2, #4]
 80007de:	f361 330d 	bfi	r3, r1, #12, #2
 80007e2:	6053      	str	r3, [r2, #4]
				break;
 80007e4:	e04f      	b.n	8000886 <ConfigurationPin+0x31a>
				GPIOx->CRH.CNF12  = PinModeMask;
 80007e6:	79bb      	ldrb	r3, [r7, #6]
 80007e8:	f003 0303 	and.w	r3, r3, #3
 80007ec:	b2d9      	uxtb	r1, r3
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	6853      	ldr	r3, [r2, #4]
 80007f2:	f361 4393 	bfi	r3, r1, #18, #2
 80007f6:	6053      	str	r3, [r2, #4]
				GPIOx->CRH.MODE12 = PinConfig->GPIO_OUTPUT_SPEED;
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	78db      	ldrb	r3, [r3, #3]
 80007fc:	f003 0303 	and.w	r3, r3, #3
 8000800:	b2d9      	uxtb	r1, r3
 8000802:	68fa      	ldr	r2, [r7, #12]
 8000804:	6853      	ldr	r3, [r2, #4]
 8000806:	f361 4311 	bfi	r3, r1, #16, #2
 800080a:	6053      	str	r3, [r2, #4]
				break;
 800080c:	e03b      	b.n	8000886 <ConfigurationPin+0x31a>
				GPIOx->CRH.CNF13  = PinModeMask;
 800080e:	79bb      	ldrb	r3, [r7, #6]
 8000810:	f003 0303 	and.w	r3, r3, #3
 8000814:	b2d9      	uxtb	r1, r3
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	6853      	ldr	r3, [r2, #4]
 800081a:	f361 5397 	bfi	r3, r1, #22, #2
 800081e:	6053      	str	r3, [r2, #4]
				GPIOx->CRH.MODE13 = PinConfig->GPIO_OUTPUT_SPEED;
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	78db      	ldrb	r3, [r3, #3]
 8000824:	f003 0303 	and.w	r3, r3, #3
 8000828:	b2d9      	uxtb	r1, r3
 800082a:	68fa      	ldr	r2, [r7, #12]
 800082c:	6853      	ldr	r3, [r2, #4]
 800082e:	f361 5315 	bfi	r3, r1, #20, #2
 8000832:	6053      	str	r3, [r2, #4]
				break;
 8000834:	e027      	b.n	8000886 <ConfigurationPin+0x31a>
				GPIOx->CRH.CNF14  = PinModeMask;
 8000836:	79bb      	ldrb	r3, [r7, #6]
 8000838:	f003 0303 	and.w	r3, r3, #3
 800083c:	b2d9      	uxtb	r1, r3
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	6853      	ldr	r3, [r2, #4]
 8000842:	f361 639b 	bfi	r3, r1, #26, #2
 8000846:	6053      	str	r3, [r2, #4]
				GPIOx->CRH.MODE14 = PinConfig->GPIO_OUTPUT_SPEED;
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	78db      	ldrb	r3, [r3, #3]
 800084c:	f003 0303 	and.w	r3, r3, #3
 8000850:	b2d9      	uxtb	r1, r3
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	6853      	ldr	r3, [r2, #4]
 8000856:	f361 6319 	bfi	r3, r1, #24, #2
 800085a:	6053      	str	r3, [r2, #4]
				break;
 800085c:	e013      	b.n	8000886 <ConfigurationPin+0x31a>
				GPIOx->CRH.CNF15  = PinModeMask;
 800085e:	79bb      	ldrb	r3, [r7, #6]
 8000860:	f003 0303 	and.w	r3, r3, #3
 8000864:	b2d9      	uxtb	r1, r3
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	6853      	ldr	r3, [r2, #4]
 800086a:	f361 739f 	bfi	r3, r1, #30, #2
 800086e:	6053      	str	r3, [r2, #4]
				GPIOx->CRH.MODE15 = PinConfig->GPIO_OUTPUT_SPEED;
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	78db      	ldrb	r3, [r3, #3]
 8000874:	f003 0303 	and.w	r3, r3, #3
 8000878:	b2d9      	uxtb	r1, r3
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	6853      	ldr	r3, [r2, #4]
 800087e:	f361 731d 	bfi	r3, r1, #28, #2
 8000882:	6053      	str	r3, [r2, #4]
				break;
 8000884:	bf00      	nop
		}
	}
}
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr

08000890 <MCAL_GPIO_Init>:
* Note              -STM32F103C6 MCU has GPIO A,B,C,D and E Modules but LQFP4
*                    package has only GPIO A,B and part of C AND D exported as
*                    external PINs from the MCU.
*/
void MCAL_GPIO_Init(GPIO_t* GPIOx , GPIO_PinConfig_t* PinConfig)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
	// Port configuration register low  (GPIOx_CRL) (x=A..G) configure pin 0..7
	// Port configuration register high (GPIOx_CRH) (x=A..G) configure pin 8..15
	volatile uint8_t Configuration = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)? LOW : HIGH;
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	881b      	ldrh	r3, [r3, #0]
 800089e:	2bff      	cmp	r3, #255	; 0xff
 80008a0:	bf8c      	ite	hi
 80008a2:	2301      	movhi	r3, #1
 80008a4:	2300      	movls	r3, #0
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	73fb      	strb	r3, [r7, #15]

	switch(PinConfig->GPIO_MODE){
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	789b      	ldrb	r3, [r3, #2]
 80008ae:	2b08      	cmp	r3, #8
 80008b0:	d868      	bhi.n	8000984 <MCAL_GPIO_Init+0xf4>
 80008b2:	a201      	add	r2, pc, #4	; (adr r2, 80008b8 <MCAL_GPIO_Init+0x28>)
 80008b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b8:	080008dd 	.word	0x080008dd
 80008bc:	080008ed 	.word	0x080008ed
 80008c0:	080008fd 	.word	0x080008fd
 80008c4:	08000925 	.word	0x08000925
 80008c8:	08000935 	.word	0x08000935
 80008cc:	08000945 	.word	0x08000945
 80008d0:	08000955 	.word	0x08000955
 80008d4:	08000965 	.word	0x08000965
 80008d8:	08000975 	.word	0x08000975
	case GPIO_MODE_ANALOG:
		ConfigurationPin(GPIOx, PinConfig, Configuration, GPIO_MODE_ANALOG_MASK);break;
 80008dc:	7bfb      	ldrb	r3, [r7, #15]
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	2300      	movs	r3, #0
 80008e2:	6839      	ldr	r1, [r7, #0]
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f7ff fe41 	bl	800056c <ConfigurationPin>
 80008ea:	e04b      	b.n	8000984 <MCAL_GPIO_Init+0xf4>
	case GPIO_MODE_Input_FLO:
		ConfigurationPin(GPIOx, PinConfig, Configuration, GPIO_MODE_Input_FLO_MASK);break;
 80008ec:	7bfb      	ldrb	r3, [r7, #15]
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	2301      	movs	r3, #1
 80008f2:	6839      	ldr	r1, [r7, #0]
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff fe39 	bl	800056c <ConfigurationPin>
 80008fa:	e043      	b.n	8000984 <MCAL_GPIO_Init+0xf4>
	case GPIO_MODE_Input_PU:
		ConfigurationPin(GPIOx, PinConfig, Configuration, GPIO_MODE_Input_PU_MASK);
 80008fc:	7bfb      	ldrb	r3, [r7, #15]
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	2302      	movs	r3, #2
 8000902:	6839      	ldr	r1, [r7, #0]
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f7ff fe31 	bl	800056c <ConfigurationPin>
		//Input pull-up Table 20. Port bit configuration table
		GPIOx->ODR._ODR |= PinConfig->GPIO_PinNumber;break;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	68db      	ldr	r3, [r3, #12]
 800090e:	b29a      	uxth	r2, r3
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	4313      	orrs	r3, r2
 8000916:	b299      	uxth	r1, r3
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	68d3      	ldr	r3, [r2, #12]
 800091c:	f361 030f 	bfi	r3, r1, #0, #16
 8000920:	60d3      	str	r3, [r2, #12]
 8000922:	e02f      	b.n	8000984 <MCAL_GPIO_Init+0xf4>
	case GPIO_MODE_Input_PD:
		ConfigurationPin(GPIOx, PinConfig, Configuration, GPIO_MODE_Input_PD_MASK);break;
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	b2da      	uxtb	r2, r3
 8000928:	2302      	movs	r3, #2
 800092a:	6839      	ldr	r1, [r7, #0]
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff fe1d 	bl	800056c <ConfigurationPin>
 8000932:	e027      	b.n	8000984 <MCAL_GPIO_Init+0xf4>
	case GPIO_MODE_Output_pp:
		ConfigurationPin(GPIOx, PinConfig, Configuration, GPIO_MODE_Output_pp_MASK);break;
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	b2da      	uxtb	r2, r3
 8000938:	2300      	movs	r3, #0
 800093a:	6839      	ldr	r1, [r7, #0]
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff fe15 	bl	800056c <ConfigurationPin>
 8000942:	e01f      	b.n	8000984 <MCAL_GPIO_Init+0xf4>
	case GPIO_MODE_Output_OD:
		ConfigurationPin(GPIOx, PinConfig, Configuration, GPIO_MODE_Output_OD_MASK);break;
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	b2da      	uxtb	r2, r3
 8000948:	2301      	movs	r3, #1
 800094a:	6839      	ldr	r1, [r7, #0]
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff fe0d 	bl	800056c <ConfigurationPin>
 8000952:	e017      	b.n	8000984 <MCAL_GPIO_Init+0xf4>
	case GPIO_MODE_Output_AF_PP:
		ConfigurationPin(GPIOx, PinConfig, Configuration, GPIO_MODE_Output_AF_PP_MASK);break;
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	b2da      	uxtb	r2, r3
 8000958:	2302      	movs	r3, #2
 800095a:	6839      	ldr	r1, [r7, #0]
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff fe05 	bl	800056c <ConfigurationPin>
 8000962:	e00f      	b.n	8000984 <MCAL_GPIO_Init+0xf4>
	case GPIO_MODE_Output_AF_OD:
		ConfigurationPin(GPIOx, PinConfig, Configuration, GPIO_MODE_Output_AF_OD_MASK);break;
 8000964:	7bfb      	ldrb	r3, [r7, #15]
 8000966:	b2da      	uxtb	r2, r3
 8000968:	2303      	movs	r3, #3
 800096a:	6839      	ldr	r1, [r7, #0]
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff fdfd 	bl	800056c <ConfigurationPin>
 8000972:	e007      	b.n	8000984 <MCAL_GPIO_Init+0xf4>
	case GPIO_MODE_Iuput_AF:
		ConfigurationPin(GPIOx, PinConfig, Configuration, GPIO_MODE_Iuput_AF_MASK);break;
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	b2da      	uxtb	r2, r3
 8000978:	2301      	movs	r3, #1
 800097a:	6839      	ldr	r1, [r7, #0]
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff fdf5 	bl	800056c <ConfigurationPin>
 8000982:	bf00      	nop
	}
}
 8000984:	bf00      	nop
 8000986:	3710      	adds	r7, #16
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <MCAL_GPIO_WritePin>:
* Retval            -None.
*
* Note              -None.
*/
void MCAL_GPIO_WritePin (GPIO_t* GPIOx , uint16_t PinNumber , uint8_t Value)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	460b      	mov	r3, r1
 8000996:	807b      	strh	r3, [r7, #2]
 8000998:	4613      	mov	r3, r2
 800099a:	707b      	strb	r3, [r7, #1]
	else
		GPIOx->ODR._ODR &= ~(PinNumber);*/


	// Using GPIOx->BSRR to write on it
	if (Value == TRUE)
 800099c:	787b      	ldrb	r3, [r7, #1]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d106      	bne.n	80009b0 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BSRR.BS = PinNumber;
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	8879      	ldrh	r1, [r7, #2]
 80009a6:	6913      	ldr	r3, [r2, #16]
 80009a8:	f361 030f 	bfi	r3, r1, #0, #16
 80009ac:	6113      	str	r3, [r2, #16]
	else
		GPIOx->BSRR.BR = PinNumber;
}
 80009ae:	e005      	b.n	80009bc <MCAL_GPIO_WritePin+0x30>
		GPIOx->BSRR.BR = PinNumber;
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	8879      	ldrh	r1, [r7, #2]
 80009b4:	6913      	ldr	r3, [r2, #16]
 80009b6:	f361 431f 	bfi	r3, r1, #16, #16
 80009ba:	6113      	str	r3, [r2, #16]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
	...

080009c8 <MCAL_RCC_GPIO_EN>:

/*******************************************************************************
                     APIs Supported by "MCAL RCC DRIVER"
*******************************************************************************/
void MCAL_RCC_GPIO_EN(GPIO_t* GPIOx)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
	if (GPIOx == GPIOA)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a15      	ldr	r2, [pc, #84]	; (8000a28 <MCAL_RCC_GPIO_EN+0x60>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d105      	bne.n	80009e4 <MCAL_RCC_GPIO_EN+0x1c>
		RCC->APB2ENR.IOPAEN = TRUE;
 80009d8:	4a14      	ldr	r2, [pc, #80]	; (8000a2c <MCAL_RCC_GPIO_EN+0x64>)
 80009da:	6993      	ldr	r3, [r2, #24]
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	6193      	str	r3, [r2, #24]
	else if (GPIOx == GPIOC)
		RCC->APB2ENR.IOPCEN = TRUE;
	else if (GPIOx == GPIOD)
		RCC->APB2ENR.IOPDEN = TRUE;
	else  { /* Misra */ }
}
 80009e2:	e01c      	b.n	8000a1e <MCAL_RCC_GPIO_EN+0x56>
	else if (GPIOx == GPIOB)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <MCAL_RCC_GPIO_EN+0x68>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d105      	bne.n	80009f8 <MCAL_RCC_GPIO_EN+0x30>
		RCC->APB2ENR.IOPBEN = TRUE;
 80009ec:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <MCAL_RCC_GPIO_EN+0x64>)
 80009ee:	6993      	ldr	r3, [r2, #24]
 80009f0:	f043 0308 	orr.w	r3, r3, #8
 80009f4:	6193      	str	r3, [r2, #24]
}
 80009f6:	e012      	b.n	8000a1e <MCAL_RCC_GPIO_EN+0x56>
	else if (GPIOx == GPIOC)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <MCAL_RCC_GPIO_EN+0x6c>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d105      	bne.n	8000a0c <MCAL_RCC_GPIO_EN+0x44>
		RCC->APB2ENR.IOPCEN = TRUE;
 8000a00:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <MCAL_RCC_GPIO_EN+0x64>)
 8000a02:	6993      	ldr	r3, [r2, #24]
 8000a04:	f043 0310 	orr.w	r3, r3, #16
 8000a08:	6193      	str	r3, [r2, #24]
}
 8000a0a:	e008      	b.n	8000a1e <MCAL_RCC_GPIO_EN+0x56>
	else if (GPIOx == GPIOD)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <MCAL_RCC_GPIO_EN+0x70>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d104      	bne.n	8000a1e <MCAL_RCC_GPIO_EN+0x56>
		RCC->APB2ENR.IOPDEN = TRUE;
 8000a14:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <MCAL_RCC_GPIO_EN+0x64>)
 8000a16:	6993      	ldr	r3, [r2, #24]
 8000a18:	f043 0320 	orr.w	r3, r3, #32
 8000a1c:	6193      	str	r3, [r2, #24]
}
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	40010800 	.word	0x40010800
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40010c00 	.word	0x40010c00
 8000a34:	40011000 	.word	0x40011000
 8000a38:	40011400 	.word	0x40011400

08000a3c <MCAL_RCC_AFIO_EN>:

void MCAL_RCC_AFIO_EN()
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
	RCC->APB2ENR.AFIOEN = TRUE;
 8000a40:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <MCAL_RCC_AFIO_EN+0x18>)
 8000a42:	6993      	ldr	r3, [r2, #24]
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6193      	str	r3, [r2, #24]
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000

08000a58 <MCAL_RCC_GetSYS_CLKFreq>:

uint32_t MCAL_RCC_GetSYS_CLKFreq(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
	// Get System clock switch status (SWS)
	switch(RCC->CFGR.SWS){
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <MCAL_RCC_GetSYS_CLKFreq+0x30>)
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d005      	beq.n	8000a76 <MCAL_RCC_GetSYS_CLKFreq+0x1e>
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d005      	beq.n	8000a7a <MCAL_RCC_GetSYS_CLKFreq+0x22>
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d105      	bne.n	8000a7e <MCAL_RCC_GetSYS_CLKFreq+0x26>
		case 0:return HSI_RC_CLK;   //HSI oscillator used as system clock
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MCAL_RCC_GetSYS_CLKFreq+0x34>)
 8000a74:	e004      	b.n	8000a80 <MCAL_RCC_GetSYS_CLKFreq+0x28>
		case 1:return HSE_CLK;      //HSE oscillator used as system clock
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 8000a78:	e002      	b.n	8000a80 <MCAL_RCC_GetSYS_CLKFreq+0x28>
			                        //HSE user should specify it
		case 2:return 16000000;     //PLL used as system clock
 8000a7a:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 8000a7c:	e000      	b.n	8000a80 <MCAL_RCC_GetSYS_CLKFreq+0x28>
			                        //PLLCLK and PLLMULL and PLL Source MUX
	}
	return ERROR;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	007a1200 	.word	0x007a1200
 8000a90:	00f42400 	.word	0x00f42400

08000a94 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	// Get AHB pre-scaler
	return (MCAL_RCC_GetSYS_CLKFreq() >> RCC->CFGR.HPRE);
 8000a98:	f7ff ffde 	bl	8000a58 <MCAL_RCC_GetSYS_CLKFreq>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <MCAL_RCC_GetHCLKFreq+0x1c>)
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	// Get APB1 pre-scaler
	return (MCAL_RCC_GetHCLKFreq() >> RCC->CFGR.PPRE1);
 8000ab8:	f7ff ffec 	bl	8000a94 <MCAL_RCC_GetHCLKFreq>
 8000abc:	4602      	mov	r2, r0
 8000abe:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <MCAL_RCC_GetPCLK1Freq+0x1c>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	// Get APB2 pre-scaler
	return (MCAL_RCC_GetHCLKFreq() >> RCC->CFGR.PPRE2);
 8000ad8:	f7ff ffdc 	bl	8000a94 <MCAL_RCC_GetHCLKFreq>
 8000adc:	4602      	mov	r2, r0
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <MCAL_RCC_GetPCLK2Freq+0x1c>)
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40021000 	.word	0x40021000

08000af4 <MCAL_SPI_Init>:
* 					 NSS Hardware/Software.
* 					-You have to configure RCC to select clock for the
* 					 selected SPI Module.
*/
void MCAL_SPI_Init(SPI_t *SPIx, SPI_Config_t *SPI_Config)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
	// 1. Enable the clock for given USART peripheral
	if      (SPIx == SPI1){ RCC->APB2ENR.SPI1EN = TRUE; Global_SPI_Config[SPI1_Index] = SPI_Config; }
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a7c      	ldr	r2, [pc, #496]	; (8000cf4 <MCAL_SPI_Init+0x200>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d108      	bne.n	8000b18 <MCAL_SPI_Init+0x24>
 8000b06:	4a7c      	ldr	r2, [pc, #496]	; (8000cf8 <MCAL_SPI_Init+0x204>)
 8000b08:	6993      	ldr	r3, [r2, #24]
 8000b0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4a7a      	ldr	r2, [pc, #488]	; (8000cfc <MCAL_SPI_Init+0x208>)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	e00b      	b.n	8000b30 <MCAL_SPI_Init+0x3c>
	else if (SPIx == SPI2){ RCC->APB1ENR.SPI2EN = TRUE; Global_SPI_Config[SPI2_Index] = SPI_Config; }
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a79      	ldr	r2, [pc, #484]	; (8000d00 <MCAL_SPI_Init+0x20c>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d107      	bne.n	8000b30 <MCAL_SPI_Init+0x3c>
 8000b20:	4a75      	ldr	r2, [pc, #468]	; (8000cf8 <MCAL_SPI_Init+0x204>)
 8000b22:	69d3      	ldr	r3, [r2, #28]
 8000b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b28:	61d3      	str	r3, [r2, #28]
 8000b2a:	4a74      	ldr	r2, [pc, #464]	; (8000cfc <MCAL_SPI_Init+0x208>)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	6053      	str	r3, [r2, #4]
	else                  { /*  Misra  */ }

	// 2. Enable SPI
	SPIx->CR1.SPE = TRUE;
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	6813      	ldr	r3, [r2, #0]
 8000b34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b38:	6013      	str	r3, [r2, #0]

	// 3. Set Master or Slave
	SPIx->CR1.MSTR = SPI_Config->SPI_Mode;
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	b2d9      	uxtb	r1, r3
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	6813      	ldr	r3, [r2, #0]
 8000b48:	f361 0382 	bfi	r3, r1, #2, #1
 8000b4c:	6013      	str	r3, [r2, #0]

	// 4. Set Communication Mode
	switch (SPI_Config->Communication_Mode){
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	785b      	ldrb	r3, [r3, #1]
 8000b52:	2b03      	cmp	r3, #3
 8000b54:	d82c      	bhi.n	8000bb0 <MCAL_SPI_Init+0xbc>
 8000b56:	a201      	add	r2, pc, #4	; (adr r2, 8000b5c <MCAL_SPI_Init+0x68>)
 8000b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5c:	08000b6d 	.word	0x08000b6d
 8000b60:	08000b85 	.word	0x08000b85
 8000b64:	08000b9b 	.word	0x08000b9b
 8000b68:	08000b79 	.word	0x08000b79
	case SPI_COMMUNICATION_MODE_2LINE_FULL_DUPLEX: SPIx->CR1.BIDIMODE = FALSE; break;
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	6813      	ldr	r3, [r2, #0]
 8000b70:	f36f 33cf 	bfc	r3, #15, #1
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	e01b      	b.n	8000bb0 <MCAL_SPI_Init+0xbc>
	case SPI_COMMUNICATION_MODE_2LINE_RXE_ONLY:    SPIx->CR1.RXONLY   = FALSE; break;
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	6813      	ldr	r3, [r2, #0]
 8000b7c:	f36f 238a 	bfc	r3, #10, #1
 8000b80:	6013      	str	r3, [r2, #0]
 8000b82:	e015      	b.n	8000bb0 <MCAL_SPI_Init+0xbc>
	case SPI_COMMUNICATION_MODE_1LINE_RX_ONLY:
		SPIx->CR1.BIDIMODE = TRUE ;
 8000b84:	687a      	ldr	r2, [r7, #4]
 8000b86:	6813      	ldr	r3, [r2, #0]
 8000b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b8c:	6013      	str	r3, [r2, #0]
		SPIx->CR1.BIDIOE   = FALSE;
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	6813      	ldr	r3, [r2, #0]
 8000b92:	f36f 338e 	bfc	r3, #14, #1
 8000b96:	6013      	str	r3, [r2, #0]
		break;
 8000b98:	e00a      	b.n	8000bb0 <MCAL_SPI_Init+0xbc>
	case SPI_COMMUNICATION_MODE_1LINE_TX_ONLY:
		SPIx->CR1.BIDIMODE = TRUE;
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	6813      	ldr	r3, [r2, #0]
 8000b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ba2:	6013      	str	r3, [r2, #0]
		SPIx->CR1.BIDIOE   = TRUE;
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	6813      	ldr	r3, [r2, #0]
 8000ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bac:	6013      	str	r3, [r2, #0]
		break;
 8000bae:	bf00      	nop
	}

	// 5. Set Frame Format
	SPIx->CR1.LSBFIRST = SPI_Config->Frame_Format;
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	789b      	ldrb	r3, [r3, #2]
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	b2d9      	uxtb	r1, r3
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	6813      	ldr	r3, [r2, #0]
 8000bbe:	f361 13c7 	bfi	r3, r1, #7, #1
 8000bc2:	6013      	str	r3, [r2, #0]

	// 6. Set Data size
	SPIx->CR1.DFF = SPI_Config->Frame_Size;
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	78db      	ldrb	r3, [r3, #3]
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	b2d9      	uxtb	r1, r3
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	6813      	ldr	r3, [r2, #0]
 8000bd2:	f361 23cb 	bfi	r3, r1, #11, #1
 8000bd6:	6013      	str	r3, [r2, #0]

	// 7. Set Clock Polarity
	SPIx->CR1.CPOL = SPI_Config->CLK_Polarity;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	791b      	ldrb	r3, [r3, #4]
 8000bdc:	f003 0301 	and.w	r3, r3, #1
 8000be0:	b2d9      	uxtb	r1, r3
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	6813      	ldr	r3, [r2, #0]
 8000be6:	f361 0341 	bfi	r3, r1, #1, #1
 8000bea:	6013      	str	r3, [r2, #0]

	// 8. Set Clock Phase
	SPIx->CR1.CPHA = SPI_Config->CLK_Phase;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	795b      	ldrb	r3, [r3, #5]
 8000bf0:	f003 0301 	and.w	r3, r3, #1
 8000bf4:	b2d9      	uxtb	r1, r3
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	6813      	ldr	r3, [r2, #0]
 8000bfa:	f361 0300 	bfi	r3, r1, #0, #1
 8000bfe:	6013      	str	r3, [r2, #0]

	// 9. Set Slave Select Management
	if      (SPI_Config->NSS == SPI_NSS_HW_SLAVE)                       {SPIx->CR2.SSOE = FALSE;}
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	799b      	ldrb	r3, [r3, #6]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d105      	bne.n	8000c14 <MCAL_SPI_Init+0x120>
 8000c08:	687a      	ldr	r2, [r7, #4]
 8000c0a:	6853      	ldr	r3, [r2, #4]
 8000c0c:	f36f 0382 	bfc	r3, #2, #1
 8000c10:	6053      	str	r3, [r2, #4]
 8000c12:	e02b      	b.n	8000c6c <MCAL_SPI_Init+0x178>
	else if (SPI_Config->NSS == SPI_NSS_HW_MASTER_SS_OUTPUT_ENABLED)    {SPIx->CR2.SSOE = TRUE; }
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	799b      	ldrb	r3, [r3, #6]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d105      	bne.n	8000c28 <MCAL_SPI_Init+0x134>
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	6853      	ldr	r3, [r2, #4]
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	6053      	str	r3, [r2, #4]
 8000c26:	e021      	b.n	8000c6c <MCAL_SPI_Init+0x178>
	else if (SPI_Config->NSS == SPI_NSS_HW_MASTER_SS_OUTPUT_DISABLED)   {SPIx->CR2.SSOE = FALSE;}
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	799b      	ldrb	r3, [r3, #6]
 8000c2c:	2b02      	cmp	r3, #2
 8000c2e:	d105      	bne.n	8000c3c <MCAL_SPI_Init+0x148>
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	6853      	ldr	r3, [r2, #4]
 8000c34:	f36f 0382 	bfc	r3, #2, #1
 8000c38:	6053      	str	r3, [r2, #4]
 8000c3a:	e017      	b.n	8000c6c <MCAL_SPI_Init+0x178>
	else if (SPI_Config->NSS == SPI_NSS_SW_SSI_RESET)                   {SPIx->CR1.SSM  = TRUE; }
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	799b      	ldrb	r3, [r3, #6]
 8000c40:	2b04      	cmp	r3, #4
 8000c42:	d105      	bne.n	8000c50 <MCAL_SPI_Init+0x15c>
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	6813      	ldr	r3, [r2, #0]
 8000c48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	e00d      	b.n	8000c6c <MCAL_SPI_Init+0x178>
	else if (SPI_Config->NSS == SPI_NSS_SW_SSI_SET){SPIx->CR1.SSM  = TRUE; SPIx->CR1.SSI = TRUE;}
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	799b      	ldrb	r3, [r3, #6]
 8000c54:	2b03      	cmp	r3, #3
 8000c56:	d109      	bne.n	8000c6c <MCAL_SPI_Init+0x178>
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	6813      	ldr	r3, [r2, #0]
 8000c5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	6813      	ldr	r3, [r2, #0]
 8000c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c6a:	6013      	str	r3, [r2, #0]
	else                                                                        { /*  Misra  */ }

	// 10. Set BoudRate Pre-scaler
	SPIx->CR1.CR1 |= (SPI_Config->BaudRate_Prescaler<<3);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	683a      	ldr	r2, [r7, #0]
 8000c72:	79d2      	ldrb	r2, [r2, #7]
 8000c74:	00d2      	lsls	r2, r2, #3
 8000c76:	431a      	orrs	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	601a      	str	r2, [r3, #0]

	// 11. Set Interrupt
	if (SPI_Config->IRQ_Enable != SPI_IRQ_ENABLE_NONE)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	7a1b      	ldrb	r3, [r3, #8]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d031      	beq.n	8000ce8 <MCAL_SPI_Init+0x1f4>
	{
		if      (SPI_Config->IRQ_Enable == SPI_IRQ_ENABLE_TXEIE)  { SPIx->CR2.TXEIE  = TRUE; }
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	7a1b      	ldrb	r3, [r3, #8]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d105      	bne.n	8000c98 <MCAL_SPI_Init+0x1a4>
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	6853      	ldr	r3, [r2, #4]
 8000c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c94:	6053      	str	r3, [r2, #4]
 8000c96:	e012      	b.n	8000cbe <MCAL_SPI_Init+0x1ca>
		else if (SPI_Config->IRQ_Enable == SPI_IRQ_ENABLE_ERRIE)  { SPIx->CR2.ERRIE  = TRUE; }
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	7a1b      	ldrb	r3, [r3, #8]
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d105      	bne.n	8000cac <MCAL_SPI_Init+0x1b8>
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	6853      	ldr	r3, [r2, #4]
 8000ca4:	f043 0320 	orr.w	r3, r3, #32
 8000ca8:	6053      	str	r3, [r2, #4]
 8000caa:	e008      	b.n	8000cbe <MCAL_SPI_Init+0x1ca>
		else if (SPI_Config->IRQ_Enable == SPI_IRQ_ENABLE_RXNEIE) { SPIx->CR2.RXNEIE = TRUE; }
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	7a1b      	ldrb	r3, [r3, #8]
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d104      	bne.n	8000cbe <MCAL_SPI_Init+0x1ca>
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	6853      	ldr	r3, [r2, #4]
 8000cb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cbc:	6053      	str	r3, [r2, #4]
		else                                                      { /*  Misra  */ }

		// 12. Open the global Interrupt for each peripheral
		if      (SPIx == SPI1){ NVIC_ISER->NVIC_ISER1 |= (1 << (SPI1_IRQ - 32)); }
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4a0c      	ldr	r2, [pc, #48]	; (8000cf4 <MCAL_SPI_Init+0x200>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d106      	bne.n	8000cd4 <MCAL_SPI_Init+0x1e0>
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MCAL_SPI_Init+0x210>)
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <MCAL_SPI_Init+0x210>)
 8000ccc:	f043 0308 	orr.w	r3, r3, #8
 8000cd0:	6053      	str	r3, [r2, #4]
		else if (SPIx == SPI2){ NVIC_ISER->NVIC_ISER1 |= (1 << (SPI2_IRQ - 32)); }
		else                  { /*  Misra  */ }

	}
	else { /*  Misra  */ }
}
 8000cd2:	e009      	b.n	8000ce8 <MCAL_SPI_Init+0x1f4>
		else if (SPIx == SPI2){ NVIC_ISER->NVIC_ISER1 |= (1 << (SPI2_IRQ - 32)); }
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <MCAL_SPI_Init+0x20c>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d105      	bne.n	8000ce8 <MCAL_SPI_Init+0x1f4>
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MCAL_SPI_Init+0x210>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <MCAL_SPI_Init+0x210>)
 8000ce2:	f043 0310 	orr.w	r3, r3, #16
 8000ce6:	6053      	str	r3, [r2, #4]
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40013000 	.word	0x40013000
 8000cf8:	40021000 	.word	0x40021000
 8000cfc:	2000001c 	.word	0x2000001c
 8000d00:	40003800 	.word	0x40003800
 8000d04:	e000e100 	.word	0xe000e100

08000d08 <MCAL_SPI_TX_RX>:
* Retval            -None.
*
* Note              -None.
*/
void MCAL_SPI_TX_RX(SPI_t *SPIx, uint16_t *P_TxBuffer, uint8_t Mechanism)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	4613      	mov	r3, r2
 8000d14:	71fb      	strb	r3, [r7, #7]
	// 1. Wait until TXE (Transmit data register empty)
	if (Mechanism == Polling_Mechanism) { while(!(SPIx->SR.TXE)); }
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d107      	bne.n	8000d2c <MCAL_SPI_TX_RX+0x24>
 8000d1c:	bf00      	nop
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	689b      	ldr	r3, [r3, #8]
 8000d22:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d0f8      	beq.n	8000d1e <MCAL_SPI_TX_RX+0x16>
	else                                { /*  Misra  */ }

	// 2. Start transmission, Write data to SPI data register
	SPIx->DR.DR = *(P_TxBuffer);
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	8819      	ldrh	r1, [r3, #0]
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	68d3      	ldr	r3, [r2, #12]
 8000d34:	f361 030f 	bfi	r3, r1, #0, #16
 8000d38:	60d3      	str	r3, [r2, #12]

	// 3. Wait until RXNE (Read data register not empty)
	if (Mechanism == Polling_Mechanism) { while(!(SPIx->SR.RXNE)); }
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d107      	bne.n	8000d50 <MCAL_SPI_TX_RX+0x48>
 8000d40:	bf00      	nop
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d0f8      	beq.n	8000d42 <MCAL_SPI_TX_RX+0x3a>
	else                                { /*  Misra  */ }

	// 4. Start reception, Write data to SPI data register
	*(P_TxBuffer) = (uint16_t)SPIx->DR.DR;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	801a      	strh	r2, [r3, #0]
}
 8000d5a:	bf00      	nop
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <MCAL_SPI_GPIO_Set_Pins>:
*
* Note              -Must open clock for AFIO & GPIO After GPIO Initialization.
*                   -Supported for SPI FULL DUPLEX Master/Slave only & NSS Hardware/Software.
*/
void MCAL_SPI_GPIO_Set_Pins(SPI_t *SPIx)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t SPI_GPIO_Config;
	GPIO_t* GPIOx = NULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
	uint16_t* GPIOPins = NULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	613b      	str	r3, [r7, #16]
	SPI_Config_t* SPIxConfig = NULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]

	SPIxConfig = (SPI_Config_t*)((SPIx == SPI1)? Global_SPI_Config[SPI1_Index] : Global_SPI_Config[SPI2_Index]);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a56      	ldr	r2, [pc, #344]	; (8000ed4 <MCAL_SPI_GPIO_Set_Pins+0x170>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d102      	bne.n	8000d86 <MCAL_SPI_GPIO_Set_Pins+0x22>
 8000d80:	4b55      	ldr	r3, [pc, #340]	; (8000ed8 <MCAL_SPI_GPIO_Set_Pins+0x174>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	e001      	b.n	8000d8a <MCAL_SPI_GPIO_Set_Pins+0x26>
 8000d86:	4b54      	ldr	r3, [pc, #336]	; (8000ed8 <MCAL_SPI_GPIO_Set_Pins+0x174>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	60fb      	str	r3, [r7, #12]
	GPIOPins   =     (uint16_t*)((SPIx == SPI1)? (SPI_GPIO_Pins) : (SPI_GPIO_Pins + 1));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a51      	ldr	r2, [pc, #324]	; (8000ed4 <MCAL_SPI_GPIO_Set_Pins+0x170>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d101      	bne.n	8000d98 <MCAL_SPI_GPIO_Set_Pins+0x34>
 8000d94:	4b51      	ldr	r3, [pc, #324]	; (8000edc <MCAL_SPI_GPIO_Set_Pins+0x178>)
 8000d96:	e000      	b.n	8000d9a <MCAL_SPI_GPIO_Set_Pins+0x36>
 8000d98:	4b51      	ldr	r3, [pc, #324]	; (8000ee0 <MCAL_SPI_GPIO_Set_Pins+0x17c>)
 8000d9a:	613b      	str	r3, [r7, #16]
	GPIOx      =       (GPIO_t*)((SPIx == SPI1)? GPIOA : GPIOB);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4a4d      	ldr	r2, [pc, #308]	; (8000ed4 <MCAL_SPI_GPIO_Set_Pins+0x170>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d101      	bne.n	8000da8 <MCAL_SPI_GPIO_Set_Pins+0x44>
 8000da4:	4b4f      	ldr	r3, [pc, #316]	; (8000ee4 <MCAL_SPI_GPIO_Set_Pins+0x180>)
 8000da6:	e000      	b.n	8000daa <MCAL_SPI_GPIO_Set_Pins+0x46>
 8000da8:	4b4f      	ldr	r3, [pc, #316]	; (8000ee8 <MCAL_SPI_GPIO_Set_Pins+0x184>)
 8000daa:	617b      	str	r3, [r7, #20]

	//Enable GPIOA and AFIO
	MCAL_RCC_AFIO_EN();
 8000dac:	f7ff fe46 	bl	8000a3c <MCAL_RCC_AFIO_EN>
	MCAL_RCC_GPIO_EN(GPIOx);
 8000db0:	6978      	ldr	r0, [r7, #20]
 8000db2:	f7ff fe09 	bl	80009c8 <MCAL_RCC_GPIO_EN>

	if (SPIxConfig->SPI_Mode == SPI_MODE_MASTER)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d14a      	bne.n	8000e54 <MCAL_SPI_GPIO_Set_Pins+0xf0>
	{
		// SPI_GPIO_Pins[x][0] >> SPIx_NSS
		if (SPIxConfig->NSS == SPI_NSS_HW_MASTER_SS_OUTPUT_DISABLED)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	799b      	ldrb	r3, [r3, #6]
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d10d      	bne.n	8000de2 <MCAL_SPI_GPIO_Set_Pins+0x7e>
		{
			SPI_GPIO_Config.GPIO_PinNumber = GPIOPins[SPIx_NSS_Index];
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	813b      	strh	r3, [r7, #8]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_Iuput_AF;
 8000dcc:	2308      	movs	r3, #8
 8000dce:	72bb      	strb	r3, [r7, #10]
			SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOx, &SPI_GPIO_Config);
 8000dd4:	f107 0308 	add.w	r3, r7, #8
 8000dd8:	4619      	mov	r1, r3
 8000dda:	6978      	ldr	r0, [r7, #20]
 8000ddc:	f7ff fd58 	bl	8000890 <MCAL_GPIO_Init>
 8000de0:	e010      	b.n	8000e04 <MCAL_SPI_GPIO_Set_Pins+0xa0>
		}
		else if (SPIxConfig->NSS == SPI_NSS_HW_MASTER_SS_OUTPUT_ENABLED)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	799b      	ldrb	r3, [r3, #6]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d10c      	bne.n	8000e04 <MCAL_SPI_GPIO_Set_Pins+0xa0>
		{
			SPI_GPIO_Config.GPIO_PinNumber = GPIOPins[SPIx_NSS_Index];
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	813b      	strh	r3, [r7, #8]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_Output_AF_PP;
 8000df0:	2306      	movs	r3, #6
 8000df2:	72bb      	strb	r3, [r7, #10]
			SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000df4:	2301      	movs	r3, #1
 8000df6:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOx, &SPI_GPIO_Config);
 8000df8:	f107 0308 	add.w	r3, r7, #8
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	6978      	ldr	r0, [r7, #20]
 8000e00:	f7ff fd46 	bl	8000890 <MCAL_GPIO_Init>
		}
		else { /* Misra */ }

		// SPI_GPIO_Pins[x][1] >> SPIx_SCK
		SPI_GPIO_Config.GPIO_PinNumber = GPIOPins[SPIx_SCK_Index];
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	885b      	ldrh	r3, [r3, #2]
 8000e08:	813b      	strh	r3, [r7, #8]
		SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_Output_AF_PP;
 8000e0a:	2306      	movs	r3, #6
 8000e0c:	72bb      	strb	r3, [r7, #10]
		SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	72fb      	strb	r3, [r7, #11]
		MCAL_GPIO_Init(GPIOx, &SPI_GPIO_Config);
 8000e12:	f107 0308 	add.w	r3, r7, #8
 8000e16:	4619      	mov	r1, r3
 8000e18:	6978      	ldr	r0, [r7, #20]
 8000e1a:	f7ff fd39 	bl	8000890 <MCAL_GPIO_Init>

		// SPI_GPIO_Pins[x][2] >> SPIx_MISO
		SPI_GPIO_Config.GPIO_PinNumber = GPIOPins[SPIx_MISO_Index];
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	889b      	ldrh	r3, [r3, #4]
 8000e22:	813b      	strh	r3, [r7, #8]
		SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_Input_FLO;
 8000e24:	2301      	movs	r3, #1
 8000e26:	72bb      	strb	r3, [r7, #10]
		SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	72fb      	strb	r3, [r7, #11]
		MCAL_GPIO_Init(GPIOx, &SPI_GPIO_Config);
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	4619      	mov	r1, r3
 8000e32:	6978      	ldr	r0, [r7, #20]
 8000e34:	f7ff fd2c 	bl	8000890 <MCAL_GPIO_Init>

		// SPI_GPIO_Pins[x][3] >> SPIx_MOSI
		SPI_GPIO_Config.GPIO_PinNumber = GPIOPins[SPIx_MOSI_Index];
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	88db      	ldrh	r3, [r3, #6]
 8000e3c:	813b      	strh	r3, [r7, #8]
		SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_Output_AF_PP;
 8000e3e:	2306      	movs	r3, #6
 8000e40:	72bb      	strb	r3, [r7, #10]
		SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000e42:	2301      	movs	r3, #1
 8000e44:	72fb      	strb	r3, [r7, #11]
		MCAL_GPIO_Init(GPIOx, &SPI_GPIO_Config);
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	6978      	ldr	r0, [r7, #20]
 8000e4e:	f7ff fd1f 	bl	8000890 <MCAL_GPIO_Init>
		SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_Iuput_AF;
		SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
		MCAL_GPIO_Init(GPIOx, &SPI_GPIO_Config);
	}
	else { /* Misra */ }
}
 8000e52:	e03b      	b.n	8000ecc <MCAL_SPI_GPIO_Set_Pins+0x168>
	else if (SPIxConfig->SPI_Mode == SPI_MODE_SLAVE)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d137      	bne.n	8000ecc <MCAL_SPI_GPIO_Set_Pins+0x168>
		if (SPIxConfig->NSS == SPI_NSS_HW_SLAVE)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	799b      	ldrb	r3, [r3, #6]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d10c      	bne.n	8000e7e <MCAL_SPI_GPIO_Set_Pins+0x11a>
			SPI_GPIO_Config.GPIO_PinNumber = GPIOPins[SPIx_NSS_Index];
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	813b      	strh	r3, [r7, #8]
			SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_Iuput_AF;
 8000e6a:	2308      	movs	r3, #8
 8000e6c:	72bb      	strb	r3, [r7, #10]
			SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOx, &SPI_GPIO_Config);
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	4619      	mov	r1, r3
 8000e78:	6978      	ldr	r0, [r7, #20]
 8000e7a:	f7ff fd09 	bl	8000890 <MCAL_GPIO_Init>
		SPI_GPIO_Config.GPIO_PinNumber = GPIOPins[SPIx_SCK_Index];
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	885b      	ldrh	r3, [r3, #2]
 8000e82:	813b      	strh	r3, [r7, #8]
		SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_Iuput_AF;
 8000e84:	2308      	movs	r3, #8
 8000e86:	72bb      	strb	r3, [r7, #10]
		SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	72fb      	strb	r3, [r7, #11]
		MCAL_GPIO_Init(GPIOx, &SPI_GPIO_Config);
 8000e8c:	f107 0308 	add.w	r3, r7, #8
 8000e90:	4619      	mov	r1, r3
 8000e92:	6978      	ldr	r0, [r7, #20]
 8000e94:	f7ff fcfc 	bl	8000890 <MCAL_GPIO_Init>
		SPI_GPIO_Config.GPIO_PinNumber = GPIOPins[SPIx_MISO_Index];
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	889b      	ldrh	r3, [r3, #4]
 8000e9c:	813b      	strh	r3, [r7, #8]
		SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_Output_AF_PP;
 8000e9e:	2306      	movs	r3, #6
 8000ea0:	72bb      	strb	r3, [r7, #10]
		SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	72fb      	strb	r3, [r7, #11]
		MCAL_GPIO_Init(GPIOx, &SPI_GPIO_Config);
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	4619      	mov	r1, r3
 8000eac:	6978      	ldr	r0, [r7, #20]
 8000eae:	f7ff fcef 	bl	8000890 <MCAL_GPIO_Init>
		SPI_GPIO_Config.GPIO_PinNumber = GPIOPins[SPIx_MOSI_Index];
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	88db      	ldrh	r3, [r3, #6]
 8000eb6:	813b      	strh	r3, [r7, #8]
		SPI_GPIO_Config.GPIO_MODE = GPIO_MODE_Iuput_AF;
 8000eb8:	2308      	movs	r3, #8
 8000eba:	72bb      	strb	r3, [r7, #10]
		SPI_GPIO_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	72fb      	strb	r3, [r7, #11]
		MCAL_GPIO_Init(GPIOx, &SPI_GPIO_Config);
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	6978      	ldr	r0, [r7, #20]
 8000ec8:	f7ff fce2 	bl	8000890 <MCAL_GPIO_Init>
}
 8000ecc:	bf00      	nop
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40013000 	.word	0x40013000
 8000ed8:	2000001c 	.word	0x2000001c
 8000edc:	080014f0 	.word	0x080014f0
 8000ee0:	080014f8 	.word	0x080014f8
 8000ee4:	40010800 	.word	0x40010800
 8000ee8:	40010c00 	.word	0x40010c00

08000eec <SPI1_IRQHandler>:

/*******************************************************************************
                                  IRQ Handlers
*******************************************************************************/
void SPI1_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	Global_SPI_Config[SPI1_Index]->P_IRQ_CallBack();
 8000ef0:	4b02      	ldr	r3, [pc, #8]	; (8000efc <SPI1_IRQHandler+0x10>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	4798      	blx	r3
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	2000001c 	.word	0x2000001c

08000f00 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	Global_SPI_Config[SPI2_Index]->P_IRQ_CallBack();
 8000f04:	4b02      	ldr	r3, [pc, #8]	; (8000f10 <SPI2_IRQHandler+0x10>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	4798      	blx	r3
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000001c 	.word	0x2000001c

08000f14 <MCAL_UART_Init>:
* Retval            -None.
*
* Note              -support for now Asynchronous mode & clock 8 MHz.
*/
void MCAL_UART_Init(USART_t* USARTx, USART_Config_t* UART_Config)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	6039      	str	r1, [r7, #0]
	// 1. Enable the clock for given USART peripheral
	if      (USARTx == USART1){ RCC->APB2ENR.USART1EN = TRUE; Global_USART_Config[0] = UART_Config; }
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a84      	ldr	r2, [pc, #528]	; (8001134 <MCAL_UART_Init+0x220>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d108      	bne.n	8000f38 <MCAL_UART_Init+0x24>
 8000f26:	4a84      	ldr	r2, [pc, #528]	; (8001138 <MCAL_UART_Init+0x224>)
 8000f28:	6993      	ldr	r3, [r2, #24]
 8000f2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f2e:	6193      	str	r3, [r2, #24]
 8000f30:	4a82      	ldr	r2, [pc, #520]	; (800113c <MCAL_UART_Init+0x228>)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	e018      	b.n	8000f6a <MCAL_UART_Init+0x56>
	else if (USARTx == USART2){ RCC->APB1ENR.USART2EN = TRUE; Global_USART_Config[1] = UART_Config; }
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a81      	ldr	r2, [pc, #516]	; (8001140 <MCAL_UART_Init+0x22c>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d108      	bne.n	8000f52 <MCAL_UART_Init+0x3e>
 8000f40:	4a7d      	ldr	r2, [pc, #500]	; (8001138 <MCAL_UART_Init+0x224>)
 8000f42:	69d3      	ldr	r3, [r2, #28]
 8000f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f48:	61d3      	str	r3, [r2, #28]
 8000f4a:	4a7c      	ldr	r2, [pc, #496]	; (800113c <MCAL_UART_Init+0x228>)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	6053      	str	r3, [r2, #4]
 8000f50:	e00b      	b.n	8000f6a <MCAL_UART_Init+0x56>
	else if (USARTx == USART3){ RCC->APB1ENR.USART3EN = TRUE; Global_USART_Config[2] = UART_Config; }
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a7b      	ldr	r2, [pc, #492]	; (8001144 <MCAL_UART_Init+0x230>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d107      	bne.n	8000f6a <MCAL_UART_Init+0x56>
 8000f5a:	4a77      	ldr	r2, [pc, #476]	; (8001138 <MCAL_UART_Init+0x224>)
 8000f5c:	69d3      	ldr	r3, [r2, #28]
 8000f5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f62:	61d3      	str	r3, [r2, #28]
 8000f64:	4a75      	ldr	r2, [pc, #468]	; (800113c <MCAL_UART_Init+0x228>)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	6093      	str	r3, [r2, #8]
	else                      { /*  Misra  */ }

	// 2. Enable USART Module
	USARTx->CR1.UE = TRUE;
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	68d3      	ldr	r3, [r2, #12]
 8000f6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f72:	60d3      	str	r3, [r2, #12]

	// 3. Enable USART TX/RX engines according to the USART_Mode configuration item
	if (UART_Config->USART_Mode != UART_Mode_RX)   { USARTx->CR1.TE = TRUE; }
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d004      	beq.n	8000f86 <MCAL_UART_Init+0x72>
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	68d3      	ldr	r3, [r2, #12]
 8000f80:	f043 0308 	orr.w	r3, r3, #8
 8000f84:	60d3      	str	r3, [r2, #12]
	if (UART_Config->USART_Mode != UART_Mode_TX)   { USARTx->CR1.RE = TRUE; }
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d004      	beq.n	8000f98 <MCAL_UART_Init+0x84>
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68d3      	ldr	r3, [r2, #12]
 8000f92:	f043 0304 	orr.w	r3, r3, #4
 8000f96:	60d3      	str	r3, [r2, #12]
	else                                           {      /*  Misra  */     }

	//  4. Pay-load width
	USARTx->CR1.M = UART_Config->Payload_Length;
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	7a1b      	ldrb	r3, [r3, #8]
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	b2d9      	uxtb	r1, r3
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	68d3      	ldr	r3, [r2, #12]
 8000fa6:	f361 330c 	bfi	r3, r1, #12, #1
 8000faa:	60d3      	str	r3, [r2, #12]

	// 5. configuration of parity control bit field
	if (UART_Config->Parity != UART_Parity_Disable)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	7a5b      	ldrb	r3, [r3, #9]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d018      	beq.n	8000fe6 <MCAL_UART_Init+0xd2>
	{
		USARTx->CR1.PCE = TRUE;
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	68d3      	ldr	r3, [r2, #12]
 8000fb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fbc:	60d3      	str	r3, [r2, #12]
		if      (UART_Config->Parity == UART_Parity_ODD) { USARTx->CR1.PS  = TRUE; }
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	7a5b      	ldrb	r3, [r3, #9]
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d105      	bne.n	8000fd2 <MCAL_UART_Init+0xbe>
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	68d3      	ldr	r3, [r2, #12]
 8000fca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fce:	60d3      	str	r3, [r2, #12]
 8000fd0:	e00e      	b.n	8000ff0 <MCAL_UART_Init+0xdc>
		else if (UART_Config->Parity == UART_Parity_EVEN){ USARTx->CR1.PS  = TRUE; }
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	7a5b      	ldrb	r3, [r3, #9]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d10a      	bne.n	8000ff0 <MCAL_UART_Init+0xdc>
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68d3      	ldr	r3, [r2, #12]
 8000fde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fe2:	60d3      	str	r3, [r2, #12]
 8000fe4:	e004      	b.n	8000ff0 <MCAL_UART_Init+0xdc>
		else                                             {      /*  Misra  */      }
	}else
	{
		USARTx->CR1.PCE = FALSE;
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	68d3      	ldr	r3, [r2, #12]
 8000fea:	f36f 238a 	bfc	r3, #10, #1
 8000fee:	60d3      	str	r3, [r2, #12]
	}

	// 6. configuration the no. of stop bits
	USARTx->CR2.STOP = UART_Config->StopBits;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	7a9b      	ldrb	r3, [r3, #10]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	b2d9      	uxtb	r1, r3
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	6913      	ldr	r3, [r2, #16]
 8000ffe:	f361 330d 	bfi	r3, r1, #12, #2
 8001002:	6113      	str	r3, [r2, #16]

	// 7. USART HW Flow Control
	if (UART_Config->HW_FlowControl != UART_HW_FlowControl_NONE)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	7adb      	ldrb	r3, [r3, #11]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d011      	beq.n	8001030 <MCAL_UART_Init+0x11c>
	{
		if (UART_Config->HW_FlowControl != UART_HW_FlowControl_CTS){ USARTx->CR3.RTSE = TRUE; }
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	7adb      	ldrb	r3, [r3, #11]
 8001010:	2b02      	cmp	r3, #2
 8001012:	d004      	beq.n	800101e <MCAL_UART_Init+0x10a>
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	6953      	ldr	r3, [r2, #20]
 8001018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101c:	6153      	str	r3, [r2, #20]
		if (UART_Config->HW_FlowControl != UART_HW_FlowControl_RTS){ USARTx->CR3.CTSE = TRUE; }
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	7adb      	ldrb	r3, [r3, #11]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d004      	beq.n	8001030 <MCAL_UART_Init+0x11c>
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	6953      	ldr	r3, [r2, #20]
 800102a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800102e:	6153      	str	r3, [r2, #20]
		else                                                       {      /*  Misra  */       }
	}

	// 8. configuration baud-rate
	uint32_t pclk = (USARTx == USART1)? MCAL_RCC_GetPCLK2Freq() : MCAL_RCC_GetPCLK1Freq();
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a40      	ldr	r2, [pc, #256]	; (8001134 <MCAL_UART_Init+0x220>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d103      	bne.n	8001040 <MCAL_UART_Init+0x12c>
 8001038:	f7ff fd4c 	bl	8000ad4 <MCAL_RCC_GetPCLK2Freq>
 800103c:	4603      	mov	r3, r0
 800103e:	e002      	b.n	8001046 <MCAL_UART_Init+0x132>
 8001040:	f7ff fd38 	bl	8000ab4 <MCAL_RCC_GetPCLK1Freq>
 8001044:	4603      	mov	r3, r0
 8001046:	60fb      	str	r3, [r7, #12]
	USARTx->BRR.BRR = UART_BRR_Register(pclk, UART_Config->BaudRate);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	011b      	lsls	r3, r3, #4
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	fbb2 f3f3 	udiv	r3, r2, r3
 8001054:	0119      	lsls	r1, r3, #4
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	009a      	lsls	r2, r3, #2
 8001060:	441a      	add	r2, r3
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	fbb2 f2f3 	udiv	r2, r2, r3
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	011b      	lsls	r3, r3, #4
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	fbb0 f3f3 	udiv	r3, r0, r3
 8001078:	2064      	movs	r0, #100	; 0x64
 800107a:	fb00 f303 	mul.w	r3, r0, r3
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	011b      	lsls	r3, r3, #4
 8001082:	4a31      	ldr	r2, [pc, #196]	; (8001148 <MCAL_UART_Init+0x234>)
 8001084:	fba2 2303 	umull	r2, r3, r2, r3
 8001088:	095b      	lsrs	r3, r3, #5
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	ea41 0203 	orr.w	r2, r1, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	609a      	str	r2, [r3, #8]

	// 9. Enable or Disable Interrupt
	if (UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	7b1b      	ldrb	r3, [r3, #12]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d046      	beq.n	800112c <MCAL_UART_Init+0x218>
	{
		if      (USARTx == USART1){ NVIC_ISER->NVIC_ISER1 |= (1 << (USART1_IRQ - 32)); }
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a24      	ldr	r2, [pc, #144]	; (8001134 <MCAL_UART_Init+0x220>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d106      	bne.n	80010b4 <MCAL_UART_Init+0x1a0>
 80010a6:	4b29      	ldr	r3, [pc, #164]	; (800114c <MCAL_UART_Init+0x238>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	4a28      	ldr	r2, [pc, #160]	; (800114c <MCAL_UART_Init+0x238>)
 80010ac:	f043 0320 	orr.w	r3, r3, #32
 80010b0:	6053      	str	r3, [r2, #4]
 80010b2:	e014      	b.n	80010de <MCAL_UART_Init+0x1ca>
		else if (USARTx == USART2){ NVIC_ISER->NVIC_ISER1 |= (1 << (USART2_IRQ - 32)); }
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a22      	ldr	r2, [pc, #136]	; (8001140 <MCAL_UART_Init+0x22c>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d106      	bne.n	80010ca <MCAL_UART_Init+0x1b6>
 80010bc:	4b23      	ldr	r3, [pc, #140]	; (800114c <MCAL_UART_Init+0x238>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	4a22      	ldr	r2, [pc, #136]	; (800114c <MCAL_UART_Init+0x238>)
 80010c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010c6:	6053      	str	r3, [r2, #4]
 80010c8:	e009      	b.n	80010de <MCAL_UART_Init+0x1ca>
		else if (USARTx == USART3){ NVIC_ISER->NVIC_ISER1 |= (1 << (USART3_IRQ - 32)); }
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a1d      	ldr	r2, [pc, #116]	; (8001144 <MCAL_UART_Init+0x230>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d105      	bne.n	80010de <MCAL_UART_Init+0x1ca>
 80010d2:	4b1e      	ldr	r3, [pc, #120]	; (800114c <MCAL_UART_Init+0x238>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	4a1d      	ldr	r2, [pc, #116]	; (800114c <MCAL_UART_Init+0x238>)
 80010d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010dc:	6053      	str	r3, [r2, #4]
		else                      { /*  Misra  */ }

		if      (UART_Config->IRQ_Enable == UART_IRQ_Enable_TXE)    { USARTx->CR1.TXEIE  = TRUE; }
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	7b1b      	ldrb	r3, [r3, #12]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d105      	bne.n	80010f2 <MCAL_UART_Init+0x1de>
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68d3      	ldr	r3, [r2, #12]
 80010ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ee:	60d3      	str	r3, [r2, #12]
		else if (UART_Config->IRQ_Enable == UART_IRQ_Enable_TC)     { USARTx->CR1.TCIE   = TRUE; }
		else if (UART_Config->IRQ_Enable == UART_IRQ_Enable_RXNEIE) { USARTx->CR1.RXNEIE = TRUE; }
		else if (UART_Config->IRQ_Enable == UART_IRQ_Enable_PE)     { USARTx->CR1.PEIE   = TRUE; }
		else                                                        { /*  Misra  */ }
	}
}
 80010f0:	e01c      	b.n	800112c <MCAL_UART_Init+0x218>
		else if (UART_Config->IRQ_Enable == UART_IRQ_Enable_TC)     { USARTx->CR1.TCIE   = TRUE; }
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	7b1b      	ldrb	r3, [r3, #12]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d105      	bne.n	8001106 <MCAL_UART_Init+0x1f2>
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68d3      	ldr	r3, [r2, #12]
 80010fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001102:	60d3      	str	r3, [r2, #12]
}
 8001104:	e012      	b.n	800112c <MCAL_UART_Init+0x218>
		else if (UART_Config->IRQ_Enable == UART_IRQ_Enable_RXNEIE) { USARTx->CR1.RXNEIE = TRUE; }
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	7b1b      	ldrb	r3, [r3, #12]
 800110a:	2b03      	cmp	r3, #3
 800110c:	d105      	bne.n	800111a <MCAL_UART_Init+0x206>
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68d3      	ldr	r3, [r2, #12]
 8001112:	f043 0320 	orr.w	r3, r3, #32
 8001116:	60d3      	str	r3, [r2, #12]
}
 8001118:	e008      	b.n	800112c <MCAL_UART_Init+0x218>
		else if (UART_Config->IRQ_Enable == UART_IRQ_Enable_PE)     { USARTx->CR1.PEIE   = TRUE; }
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	7b1b      	ldrb	r3, [r3, #12]
 800111e:	2b04      	cmp	r3, #4
 8001120:	d104      	bne.n	800112c <MCAL_UART_Init+0x218>
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	68d3      	ldr	r3, [r2, #12]
 8001126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112a:	60d3      	str	r3, [r2, #12]
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40013800 	.word	0x40013800
 8001138:	40021000 	.word	0x40021000
 800113c:	20000024 	.word	0x20000024
 8001140:	40004400 	.word	0x40004400
 8001144:	40004800 	.word	0x40004800
 8001148:	51eb851f 	.word	0x51eb851f
 800114c:	e000e100 	.word	0xe000e100

08001150 <MCAL_UART_GPIO_Set_Pins>:
*
* Note              -Should enable the corresponding ALT & GPIO in RCC clock.
* 					-Also called after MCAL_UART_Init().
*/
void MCAL_UART_GPIO_Set_Pins(USART_t* USARTx)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinConfig;
	GPIO_t* GPIOx               = NULL;
 8001158:	2300      	movs	r3, #0
 800115a:	617b      	str	r3, [r7, #20]
	uint16_t* GPIOPins          = NULL;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
	USART_Config_t* UARTxConfig = NULL;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]

	UARTxConfig = (USART_Config_t*)((USARTx == USART1)? (Global_USART_Config + USART1_Index)  :
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a3a      	ldr	r2, [pc, #232]	; (8001250 <MCAL_UART_GPIO_Set_Pins+0x100>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d007      	beq.n	800117c <MCAL_UART_GPIO_Set_Pins+0x2c>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a39      	ldr	r2, [pc, #228]	; (8001254 <MCAL_UART_GPIO_Set_Pins+0x104>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d101      	bne.n	8001178 <MCAL_UART_GPIO_Set_Pins+0x28>
 8001174:	4b38      	ldr	r3, [pc, #224]	; (8001258 <MCAL_UART_GPIO_Set_Pins+0x108>)
 8001176:	e002      	b.n	800117e <MCAL_UART_GPIO_Set_Pins+0x2e>
 8001178:	4b38      	ldr	r3, [pc, #224]	; (800125c <MCAL_UART_GPIO_Set_Pins+0x10c>)
 800117a:	e000      	b.n	800117e <MCAL_UART_GPIO_Set_Pins+0x2e>
 800117c:	4b38      	ldr	r3, [pc, #224]	; (8001260 <MCAL_UART_GPIO_Set_Pins+0x110>)
 800117e:	60fb      	str	r3, [r7, #12]
			                       ((USARTx == USART2)? (Global_USART_Config + USART2_Index)  :
			                    		                (Global_USART_Config + USART3_Index)));

	GPIOPins    =       (uint16_t*)((USARTx == USART1)? (UART_GPIO_Pins    )  :
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a33      	ldr	r2, [pc, #204]	; (8001250 <MCAL_UART_GPIO_Set_Pins+0x100>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d007      	beq.n	8001198 <MCAL_UART_GPIO_Set_Pins+0x48>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a32      	ldr	r2, [pc, #200]	; (8001254 <MCAL_UART_GPIO_Set_Pins+0x104>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d101      	bne.n	8001194 <MCAL_UART_GPIO_Set_Pins+0x44>
 8001190:	4b34      	ldr	r3, [pc, #208]	; (8001264 <MCAL_UART_GPIO_Set_Pins+0x114>)
 8001192:	e002      	b.n	800119a <MCAL_UART_GPIO_Set_Pins+0x4a>
 8001194:	4b34      	ldr	r3, [pc, #208]	; (8001268 <MCAL_UART_GPIO_Set_Pins+0x118>)
 8001196:	e000      	b.n	800119a <MCAL_UART_GPIO_Set_Pins+0x4a>
 8001198:	4b34      	ldr	r3, [pc, #208]	; (800126c <MCAL_UART_GPIO_Set_Pins+0x11c>)
 800119a:	613b      	str	r3, [r7, #16]
			                       ((USARTx == USART2)? (UART_GPIO_Pins + 1)  :
			                    		                (UART_GPIO_Pins + 2)));

	GPIOx       =         (GPIO_t*)((USARTx == USART3)? GPIOB : GPIOA);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a34      	ldr	r2, [pc, #208]	; (8001270 <MCAL_UART_GPIO_Set_Pins+0x120>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d101      	bne.n	80011a8 <MCAL_UART_GPIO_Set_Pins+0x58>
 80011a4:	4b33      	ldr	r3, [pc, #204]	; (8001274 <MCAL_UART_GPIO_Set_Pins+0x124>)
 80011a6:	e000      	b.n	80011aa <MCAL_UART_GPIO_Set_Pins+0x5a>
 80011a8:	4b33      	ldr	r3, [pc, #204]	; (8001278 <MCAL_UART_GPIO_Set_Pins+0x128>)
 80011aa:	617b      	str	r3, [r7, #20]

	//Enable GPIOx and AFIO
	MCAL_RCC_AFIO_EN();
 80011ac:	f7ff fc46 	bl	8000a3c <MCAL_RCC_AFIO_EN>
	MCAL_RCC_GPIO_EN(GPIOx);
 80011b0:	6978      	ldr	r0, [r7, #20]
 80011b2:	f7ff fc09 	bl	80009c8 <MCAL_RCC_GPIO_EN>

	// TX and  RX
	if (UARTxConfig->USART_Mode != UART_Mode_TX)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d00c      	beq.n	80011d8 <MCAL_UART_GPIO_Set_Pins+0x88>
	{
		// Initialize GPIOx GPIOPins[UARTx_RX_Index] as a AFIO UART RX
		PinConfig.GPIO_PinNumber = GPIOPins[UARTx_RX_Index];
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	885b      	ldrh	r3, [r3, #2]
 80011c2:	813b      	strh	r3, [r7, #8]
		PinConfig.GPIO_MODE = GPIO_MODE_Iuput_AF;
 80011c4:	2308      	movs	r3, #8
 80011c6:	72bb      	strb	r3, [r7, #10]
		PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
 80011c8:	2300      	movs	r3, #0
 80011ca:	72fb      	strb	r3, [r7, #11]
		MCAL_GPIO_Init(GPIOx, &PinConfig);
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	4619      	mov	r1, r3
 80011d2:	6978      	ldr	r0, [r7, #20]
 80011d4:	f7ff fb5c 	bl	8000890 <MCAL_GPIO_Init>
	}
	if (UARTxConfig->USART_Mode != UART_Mode_RX)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d00c      	beq.n	80011fa <MCAL_UART_GPIO_Set_Pins+0xaa>
	{
		// Initialize GPIOx GPIOPins[UARTx_TX_Index] as a AFIO UART TX
		PinConfig.GPIO_PinNumber = GPIOPins[UARTx_TX_Index];
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	813b      	strh	r3, [r7, #8]
		PinConfig.GPIO_MODE = GPIO_MODE_Output_AF_PP;
 80011e6:	2306      	movs	r3, #6
 80011e8:	72bb      	strb	r3, [r7, #10]
		PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 80011ea:	2301      	movs	r3, #1
 80011ec:	72fb      	strb	r3, [r7, #11]
		MCAL_GPIO_Init(GPIOx, &PinConfig);
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	4619      	mov	r1, r3
 80011f4:	6978      	ldr	r0, [r7, #20]
 80011f6:	f7ff fb4b 	bl	8000890 <MCAL_GPIO_Init>
	}
	else { /*  Misra  */ }

	//  CTS and RTS
	if (UARTxConfig->HW_FlowControl != UART_HW_FlowControl_NONE)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	7adb      	ldrb	r3, [r3, #11]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d021      	beq.n	8001246 <MCAL_UART_GPIO_Set_Pins+0xf6>
	{
		if (UARTxConfig->HW_FlowControl != UART_HW_FlowControl_RTS)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	7adb      	ldrb	r3, [r3, #11]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d00c      	beq.n	8001224 <MCAL_UART_GPIO_Set_Pins+0xd4>
		{
			// Initialize GPIOx GPIOPins[UARTx_CTS_Index] as a AFIO UART CTS
			PinConfig.GPIO_PinNumber = GPIOPins[UARTx_CTS_Index];
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	889b      	ldrh	r3, [r3, #4]
 800120e:	813b      	strh	r3, [r7, #8]
			PinConfig.GPIO_MODE = GPIO_MODE_Input_FLO;
 8001210:	2301      	movs	r3, #1
 8001212:	72bb      	strb	r3, [r7, #10]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_Input;
 8001214:	2300      	movs	r3, #0
 8001216:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOx, &PinConfig);
 8001218:	f107 0308 	add.w	r3, r7, #8
 800121c:	4619      	mov	r1, r3
 800121e:	6978      	ldr	r0, [r7, #20]
 8001220:	f7ff fb36 	bl	8000890 <MCAL_GPIO_Init>
		}
		if (UARTxConfig->HW_FlowControl != UART_HW_FlowControl_CTS)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	7adb      	ldrb	r3, [r3, #11]
 8001228:	2b02      	cmp	r3, #2
 800122a:	d00c      	beq.n	8001246 <MCAL_UART_GPIO_Set_Pins+0xf6>
		{
			// Initialize GPIOx GPIOPins[UARTx_RTS_Index] as a AFIO UART RTS
			PinConfig.GPIO_PinNumber = GPIOPins[UARTx_RTS_Index];
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	88db      	ldrh	r3, [r3, #6]
 8001230:	813b      	strh	r3, [r7, #8]
			PinConfig.GPIO_MODE = GPIO_MODE_Output_AF_PP;
 8001232:	2306      	movs	r3, #6
 8001234:	72bb      	strb	r3, [r7, #10]
			PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10MHZ;
 8001236:	2301      	movs	r3, #1
 8001238:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOx, &PinConfig);
 800123a:	f107 0308 	add.w	r3, r7, #8
 800123e:	4619      	mov	r1, r3
 8001240:	6978      	ldr	r0, [r7, #20]
 8001242:	f7ff fb25 	bl	8000890 <MCAL_GPIO_Init>
		}
		else { /*  Misra  */ }
	}

}
 8001246:	bf00      	nop
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40013800 	.word	0x40013800
 8001254:	40004400 	.word	0x40004400
 8001258:	20000028 	.word	0x20000028
 800125c:	2000002c 	.word	0x2000002c
 8001260:	20000024 	.word	0x20000024
 8001264:	08001508 	.word	0x08001508
 8001268:	08001510 	.word	0x08001510
 800126c:	08001500 	.word	0x08001500
 8001270:	40004800 	.word	0x40004800
 8001274:	40010c00 	.word	0x40010c00
 8001278:	40010800 	.word	0x40010800

0800127c <MCAL_UART_SendData>:
*                   -Because it is replaced by the parity.
*                   -When receiving with the parity enabled the value read in
*                    the MSB bit is the received parity bit.
*/
void MCAL_UART_SendData(USART_t* USARTx, uint16_t* P_TxBuffer, uint8_t Mechanism)
{
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	4613      	mov	r3, r2
 8001288:	71fb      	strb	r3, [r7, #7]
	// 1. Wait until TXE (Transmit data register empty)
	if (Mechanism == Polling_Mechanism) { while(!(USARTx->SR.TXE)); }
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d107      	bne.n	80012a0 <MCAL_UART_SendData+0x24>
 8001290:	bf00      	nop
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0f8      	beq.n	8001292 <MCAL_UART_SendData+0x16>
	else                                { /*  Misra  */ }

	// 2. Check the USART_WordLength item for 9-bit or 8-bit in a frame
	USART_Config_t* USARTxConfig = NULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]
	USARTxConfig = (USART_Config_t*)((USARTx == USART1)?  Global_USART_Config       :
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4a19      	ldr	r2, [pc, #100]	; (800130c <MCAL_UART_SendData+0x90>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d007      	beq.n	80012bc <MCAL_UART_SendData+0x40>
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4a18      	ldr	r2, [pc, #96]	; (8001310 <MCAL_UART_SendData+0x94>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d101      	bne.n	80012b8 <MCAL_UART_SendData+0x3c>
 80012b4:	4b17      	ldr	r3, [pc, #92]	; (8001314 <MCAL_UART_SendData+0x98>)
 80012b6:	e002      	b.n	80012be <MCAL_UART_SendData+0x42>
 80012b8:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MCAL_UART_SendData+0x9c>)
 80012ba:	e000      	b.n	80012be <MCAL_UART_SendData+0x42>
 80012bc:	4b17      	ldr	r3, [pc, #92]	; (800131c <MCAL_UART_SendData+0xa0>)
 80012be:	617b      	str	r3, [r7, #20]
			                        ((USARTx == USART2)? (Global_USART_Config + 1)  :
			                		                     (Global_USART_Config + 2)));

	switch(USARTxConfig->Payload_Length){
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	7a1b      	ldrb	r3, [r3, #8]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d002      	beq.n	80012ce <MCAL_UART_SendData+0x52>
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d00d      	beq.n	80012e8 <MCAL_UART_SendData+0x6c>
	case UART_Payload_Length_8B: USARTx->DR.DR = ((*P_TxBuffer) & (uint8_t)0xFF); break;
	case UART_Payload_Length_9B: USARTx->DR.DR = ((*P_TxBuffer) & (uint8_t)0x1FF);break;
	}
}
 80012cc:	e019      	b.n	8001302 <MCAL_UART_SendData+0x86>
	case UART_Payload_Length_8B: USARTx->DR.DR = ((*P_TxBuffer) & (uint8_t)0xFF); break;
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	b299      	uxth	r1, r3
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	6853      	ldr	r3, [r2, #4]
 80012e0:	f361 0308 	bfi	r3, r1, #0, #9
 80012e4:	6053      	str	r3, [r2, #4]
 80012e6:	e00c      	b.n	8001302 <MCAL_UART_SendData+0x86>
	case UART_Payload_Length_9B: USARTx->DR.DR = ((*P_TxBuffer) & (uint8_t)0x1FF);break;
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	b299      	uxth	r1, r3
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	6853      	ldr	r3, [r2, #4]
 80012fa:	f361 0308 	bfi	r3, r1, #0, #9
 80012fe:	6053      	str	r3, [r2, #4]
 8001300:	bf00      	nop
}
 8001302:	bf00      	nop
 8001304:	371c      	adds	r7, #28
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	40013800 	.word	0x40013800
 8001310:	40004400 	.word	0x40004400
 8001314:	20000028 	.word	0x20000028
 8001318:	2000002c 	.word	0x2000002c
 800131c:	20000024 	.word	0x20000024

08001320 <MCAL_UART_ReceiveData>:
*                   -Because it is replaced by the parity.
*                   -When receiving with the parity enabled the value read in
*                    the MSB bit is the received parity bit.
*/
void MCAL_UART_ReceiveData(USART_t* USARTx, uint16_t* P_RxBuffer, uint8_t Mechanism)
{
 8001320:	b480      	push	{r7}
 8001322:	b087      	sub	sp, #28
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	4613      	mov	r3, r2
 800132c:	71fb      	strb	r3, [r7, #7]
	// 1. Wait until RXNE (Read data register not empty)
	if (Mechanism == Polling_Mechanism) { while(!(USARTx->SR.RXNE)); }
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d107      	bne.n	8001344 <MCAL_UART_ReceiveData+0x24>
 8001334:	bf00      	nop
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0f8      	beq.n	8001336 <MCAL_UART_ReceiveData+0x16>
	else                                { /*  Misra  */ }

	// 2. Check the USART_WordLength item for 9-bit or 8-bit in a frame
	USART_Config_t* USARTxConfig = NULL;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
	USARTxConfig = (USART_Config_t*)((USARTx == USART1)?  Global_USART_Config       :
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4a24      	ldr	r2, [pc, #144]	; (80013dc <MCAL_UART_ReceiveData+0xbc>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d007      	beq.n	8001360 <MCAL_UART_ReceiveData+0x40>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4a23      	ldr	r2, [pc, #140]	; (80013e0 <MCAL_UART_ReceiveData+0xc0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d101      	bne.n	800135c <MCAL_UART_ReceiveData+0x3c>
 8001358:	4b22      	ldr	r3, [pc, #136]	; (80013e4 <MCAL_UART_ReceiveData+0xc4>)
 800135a:	e002      	b.n	8001362 <MCAL_UART_ReceiveData+0x42>
 800135c:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <MCAL_UART_ReceiveData+0xc8>)
 800135e:	e000      	b.n	8001362 <MCAL_UART_ReceiveData+0x42>
 8001360:	4b22      	ldr	r3, [pc, #136]	; (80013ec <MCAL_UART_ReceiveData+0xcc>)
 8001362:	617b      	str	r3, [r7, #20]
			                        ((USARTx == USART2)? (Global_USART_Config + 1)  :
			                		                     (Global_USART_Config + 2)));

	switch(USARTxConfig->Payload_Length){
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	7a1b      	ldrb	r3, [r3, #8]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d002      	beq.n	8001372 <MCAL_UART_ReceiveData+0x52>
 800136c:	2b01      	cmp	r3, #1
 800136e:	d019      	beq.n	80013a4 <MCAL_UART_ReceiveData+0x84>
			*P_RxBuffer =  USARTx->DR.DR;
		else
			*P_RxBuffer = (USARTx->DR.DR & (uint8_t)0xFF);
		break;
	}
}
 8001370:	e02f      	b.n	80013d2 <MCAL_UART_ReceiveData+0xb2>
		if (USARTxConfig->Parity == UART_Parity_Disable)
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	7a5b      	ldrb	r3, [r3, #9]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d109      	bne.n	800138e <MCAL_UART_ReceiveData+0x6e>
			*P_RxBuffer = (USARTx->DR.DR & (uint8_t)0xFF);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001382:	b29b      	uxth	r3, r3
 8001384:	b2db      	uxtb	r3, r3
 8001386:	b29a      	uxth	r2, r3
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	801a      	strh	r2, [r3, #0]
		break;
 800138c:	e021      	b.n	80013d2 <MCAL_UART_ReceiveData+0xb2>
			*P_RxBuffer = (USARTx->DR.DR & (uint8_t)0x7F);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001396:	b29b      	uxth	r3, r3
 8001398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800139c:	b29a      	uxth	r2, r3
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	801a      	strh	r2, [r3, #0]
		break;
 80013a2:	e016      	b.n	80013d2 <MCAL_UART_ReceiveData+0xb2>
		if (USARTxConfig->Parity == UART_Parity_Disable)
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	7a5b      	ldrb	r3, [r3, #9]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d108      	bne.n	80013be <MCAL_UART_ReceiveData+0x9e>
			*P_RxBuffer =  USARTx->DR.DR;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	801a      	strh	r2, [r3, #0]
		break;
 80013bc:	e008      	b.n	80013d0 <MCAL_UART_ReceiveData+0xb0>
			*P_RxBuffer = (USARTx->DR.DR & (uint8_t)0xFF);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	801a      	strh	r2, [r3, #0]
		break;
 80013d0:	bf00      	nop
}
 80013d2:	bf00      	nop
 80013d4:	371c      	adds	r7, #28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	40013800 	.word	0x40013800
 80013e0:	40004400 	.word	0x40004400
 80013e4:	20000028 	.word	0x20000028
 80013e8:	2000002c 	.word	0x2000002c
 80013ec:	20000024 	.word	0x20000024

080013f0 <USART2_IRQHandler>:

/*******************************************************************************
                                  IRQ Handlers
*******************************************************************************/
void USART2_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	Global_USART_Config[1]->P_IRQ_CallBack();
 80013f4:	4b02      	ldr	r3, [pc, #8]	; (8001400 <USART2_IRQHandler+0x10>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	4798      	blx	r3
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000024 	.word	0x20000024

08001404 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	Global_USART_Config[0]->P_IRQ_CallBack();
 8001408:	4b02      	ldr	r3, [pc, #8]	; (8001414 <USART1_IRQHandler+0x10>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	4798      	blx	r3
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000024 	.word	0x20000024

08001418 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	Global_USART_Config[2]->P_IRQ_CallBack();
 800141c:	4b02      	ldr	r3, [pc, #8]	; (8001428 <USART3_IRQHandler+0x10>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	4798      	blx	r3
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000024 	.word	0x20000024

0800142c <main>:
                                     Includes
*******************************************************************************/
#include "SPI_Debug_Analysis.h"

int main(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	  SPI_Debug_Analysis_Using_UART1_Interrupt();
 8001430:	f7fe feca 	bl	80001c8 <SPI_Debug_Analysis_Using_UART1_Interrupt>
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800143c:	480d      	ldr	r0, [pc, #52]	; (8001474 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800143e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001440:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001444:	480c      	ldr	r0, [pc, #48]	; (8001478 <LoopForever+0x6>)
  ldr r1, =_edata
 8001446:	490d      	ldr	r1, [pc, #52]	; (800147c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001448:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <LoopForever+0xe>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800144c:	e002      	b.n	8001454 <LoopCopyDataInit>

0800144e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001452:	3304      	adds	r3, #4

08001454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001458:	d3f9      	bcc.n	800144e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <LoopForever+0x12>)
  ldr r4, =_ebss
 800145c:	4c0a      	ldr	r4, [pc, #40]	; (8001488 <LoopForever+0x16>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001460:	e001      	b.n	8001466 <LoopFillZerobss>

08001462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001464:	3204      	adds	r2, #4

08001466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001468:	d3fb      	bcc.n	8001462 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800146a:	f000 f811 	bl	8001490 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800146e:	f7ff ffdd 	bl	800142c <main>

08001472 <LoopForever>:

LoopForever:
    b LoopForever
 8001472:	e7fe      	b.n	8001472 <LoopForever>
  ldr   r0, =_estack
 8001474:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800147c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001480:	08001520 	.word	0x08001520
  ldr r2, =_sbss
 8001484:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001488:	20000070 	.word	0x20000070

0800148c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC1_2_IRQHandler>
	...

08001490 <__libc_init_array>:
 8001490:	b570      	push	{r4, r5, r6, lr}
 8001492:	2500      	movs	r5, #0
 8001494:	4e0c      	ldr	r6, [pc, #48]	; (80014c8 <__libc_init_array+0x38>)
 8001496:	4c0d      	ldr	r4, [pc, #52]	; (80014cc <__libc_init_array+0x3c>)
 8001498:	1ba4      	subs	r4, r4, r6
 800149a:	10a4      	asrs	r4, r4, #2
 800149c:	42a5      	cmp	r5, r4
 800149e:	d109      	bne.n	80014b4 <__libc_init_array+0x24>
 80014a0:	f000 f81a 	bl	80014d8 <_init>
 80014a4:	2500      	movs	r5, #0
 80014a6:	4e0a      	ldr	r6, [pc, #40]	; (80014d0 <__libc_init_array+0x40>)
 80014a8:	4c0a      	ldr	r4, [pc, #40]	; (80014d4 <__libc_init_array+0x44>)
 80014aa:	1ba4      	subs	r4, r4, r6
 80014ac:	10a4      	asrs	r4, r4, #2
 80014ae:	42a5      	cmp	r5, r4
 80014b0:	d105      	bne.n	80014be <__libc_init_array+0x2e>
 80014b2:	bd70      	pop	{r4, r5, r6, pc}
 80014b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014b8:	4798      	blx	r3
 80014ba:	3501      	adds	r5, #1
 80014bc:	e7ee      	b.n	800149c <__libc_init_array+0xc>
 80014be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014c2:	4798      	blx	r3
 80014c4:	3501      	adds	r5, #1
 80014c6:	e7f2      	b.n	80014ae <__libc_init_array+0x1e>
 80014c8:	08001518 	.word	0x08001518
 80014cc:	08001518 	.word	0x08001518
 80014d0:	08001518 	.word	0x08001518
 80014d4:	0800151c 	.word	0x0800151c

080014d8 <_init>:
 80014d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014da:	bf00      	nop
 80014dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014de:	bc08      	pop	{r3}
 80014e0:	469e      	mov	lr, r3
 80014e2:	4770      	bx	lr

080014e4 <_fini>:
 80014e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014e6:	bf00      	nop
 80014e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ea:	bc08      	pop	{r3}
 80014ec:	469e      	mov	lr, r3
 80014ee:	4770      	bx	lr
