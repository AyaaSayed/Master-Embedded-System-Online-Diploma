
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000082c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000074  00800060  0000082c  000008c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005d  008000d4  008000d4  00000934  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000964  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a29  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b64  00000000  00000000  000024c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bc1  00000000  00000000  0000302d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  00003bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b0  00000000  00000000  00003e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cb9  00000000  00000000  000044d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00005189  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e2       	ldi	r30, 0x2C	; 44
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3d       	cpi	r26, 0xD4	; 212
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 ed       	ldi	r26, 0xD4	; 212
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 33       	cpi	r26, 0x31	; 49
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 03 03 	call	0x606	; 0x606 <main>
  8a:	0c 94 14 04 	jmp	0x828	; 0x828 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Is_Operator>:
FIFO_Buffer_t Number2_FIFO;
string_parser_output_t* output = NULL;

uint8_t Is_Operator(char c)
{
	return (c=='+' || c=='-' || c=='*'|| c=='/' );
  92:	98 2f       	mov	r25, r24
  94:	9d 7f       	andi	r25, 0xFD	; 253
  96:	9d 32       	cpi	r25, 0x2D	; 45
  98:	39 f0       	breq	.+14     	; 0xa8 <Is_Operator+0x16>
  9a:	8a 52       	subi	r24, 0x2A	; 42
  9c:	91 e0       	ldi	r25, 0x01	; 1
  9e:	82 30       	cpi	r24, 0x02	; 2
  a0:	08 f0       	brcs	.+2      	; 0xa4 <Is_Operator+0x12>
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	89 2f       	mov	r24, r25
  a6:	08 95       	ret
  a8:	81 e0       	ldi	r24, 0x01	; 1
}
  aa:	08 95       	ret

000000ac <String_parser>:

void String_parser(FIFO_t *Buffer, uint8_t length)
{
  ac:	af 92       	push	r10
  ae:	bf 92       	push	r11
  b0:	cf 92       	push	r12
  b2:	df 92       	push	r13
  b4:	ef 92       	push	r14
  b6:	ff 92       	push	r15
  b8:	1f 93       	push	r17
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	6c 01       	movw	r12, r24
  c0:	16 2f       	mov	r17, r22
	FIFO_INIT(&Number1_FIFO, Num1, 3);
  c2:	23 e0       	ldi	r18, 0x03	; 3
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	40 e0       	ldi	r20, 0x00	; 0
  c8:	50 e0       	ldi	r21, 0x00	; 0
  ca:	6a ef       	ldi	r22, 0xFA	; 250
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	8c ee       	ldi	r24, 0xEC	; 236
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 65 01 	call	0x2ca	; 0x2ca <FIFO_INIT>
	FIFO_INIT(&Number2_FIFO, Num2, 3);
  d6:	23 e0       	ldi	r18, 0x03	; 3
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	40 e0       	ldi	r20, 0x00	; 0
  dc:	50 e0       	ldi	r21, 0x00	; 0
  de:	66 ed       	ldi	r22, 0xD6	; 214
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	89 ed       	ldi	r24, 0xD9	; 217
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 65 01 	call	0x2ca	; 0x2ca <FIFO_INIT>
	
	//Initialize
	output->Result = 0;
  ea:	e0 91 d4 00 	lds	r30, 0x00D4	; 0x8000d4 <__data_end>
  ee:	f0 91 d5 00 	lds	r31, 0x00D5	; 0x8000d5 <__data_end+0x1>
  f2:	15 82       	std	Z+5, r1	; 0x05
  f4:	14 82       	std	Z+4, r1	; 0x04
	output->Number1 = 0;
  f6:	11 82       	std	Z+1, r1	; 0x01
  f8:	10 82       	st	Z, r1
	output->Number2 = 0;	
  fa:	a0 90 d4 00 	lds	r10, 0x00D4	; 0x8000d4 <__data_end>
  fe:	b0 90 d5 00 	lds	r11, 0x00D5	; 0x8000d5 <__data_end+0x1>
 102:	f5 01       	movw	r30, r10
 104:	13 82       	std	Z+3, r1	; 0x03
 106:	12 82       	std	Z+2, r1	; 0x02
	output->operation = 0;
 108:	16 82       	std	Z+6, r1	; 0x06
	output->error = CALC_NO_ERR;
 10a:	17 82       	std	Z+7, r1	; 0x07
	
	//Checking for syntax errors..
	for(uint8_t i=0 ; i<length ; i++)
 10c:	11 23       	and	r17, r17
 10e:	09 f4       	brne	.+2      	; 0x112 <String_parser+0x66>
 110:	63 c0       	rjmp	.+198    	; 0x1d8 <String_parser+0x12c>
	{
		//If there are 3 consecutive operators
		//If the text begins with * or / or ends with an operator
		if((Buffer[0] == '*' || Buffer[0] == '/' || Is_Operator(Buffer[length])) || (Is_Operator(Buffer[i]) && Is_Operator(Buffer[i+1]) && Is_Operator(Buffer[i+2])))
 112:	f6 01       	movw	r30, r12
 114:	80 81       	ld	r24, Z
 116:	8a 32       	cpi	r24, 0x2A	; 42
 118:	29 f1       	breq	.+74     	; 0x164 <String_parser+0xb8>
 11a:	8f 32       	cpi	r24, 0x2F	; 47
 11c:	19 f1       	breq	.+70     	; 0x164 <String_parser+0xb8>
 11e:	e1 0f       	add	r30, r17
 120:	f1 1d       	adc	r31, r1
 122:	80 81       	ld	r24, Z
 124:	0e 94 49 00 	call	0x92	; 0x92 <Is_Operator>
 128:	e6 01       	movw	r28, r12
 12a:	ee 24       	eor	r14, r14
 12c:	ea 94       	dec	r14
 12e:	e1 0e       	add	r14, r17
 130:	f1 2c       	mov	r15, r1
 132:	ff ef       	ldi	r31, 0xFF	; 255
 134:	ef 1a       	sub	r14, r31
 136:	ff 0a       	sbc	r15, r31
 138:	ec 0c       	add	r14, r12
 13a:	fd 1c       	adc	r15, r13
 13c:	81 11       	cpse	r24, r1
 13e:	12 c0       	rjmp	.+36     	; 0x164 <String_parser+0xb8>
 140:	89 91       	ld	r24, Y+
 142:	0e 94 49 00 	call	0x92	; 0x92 <Is_Operator>
 146:	88 23       	and	r24, r24
 148:	09 f4       	brne	.+2      	; 0x14c <String_parser+0xa0>
 14a:	a6 c0       	rjmp	.+332    	; 0x298 <String_parser+0x1ec>
 14c:	88 81       	ld	r24, Y
 14e:	0e 94 49 00 	call	0x92	; 0x92 <Is_Operator>
 152:	88 23       	and	r24, r24
 154:	09 f4       	brne	.+2      	; 0x158 <String_parser+0xac>
 156:	a0 c0       	rjmp	.+320    	; 0x298 <String_parser+0x1ec>
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	0e 94 49 00 	call	0x92	; 0x92 <Is_Operator>
 15e:	88 23       	and	r24, r24
 160:	09 f4       	brne	.+2      	; 0x164 <String_parser+0xb8>
 162:	9a c0       	rjmp	.+308    	; 0x298 <String_parser+0x1ec>
		{
			output->error = CALC_SYNTAX_ERR;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	f5 01       	movw	r30, r10
 168:	87 83       	std	Z+7, r24	; 0x07
			LCD_Send_Command(LCD_BEGIN_AT_SECOND_RAW);
 16a:	80 ec       	ldi	r24, 0xC0	; 192
 16c:	0e 94 33 02 	call	0x466	; 0x466 <LCD_Send_Command>
			LCD_display_String("CALC SYNTAX ERR");
 170:	80 e6       	ldi	r24, 0x60	; 96
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <LCD_display_String>
			break;
 178:	93 c0       	rjmp	.+294    	; 0x2a0 <String_parser+0x1f4>
	uint8_t op_count = 0, i = 0;
	
	//If there are no syntax errors, start parsing
	while(i < length)
	{
		if((Buffer[i] == '+') || (Buffer[i] == '-') || (Buffer[i] == '*') || (Buffer[i] == '/'))   //If found operator
 17a:	69 91       	ld	r22, Y+
 17c:	96 2f       	mov	r25, r22
 17e:	9d 7f       	andi	r25, 0xFD	; 253
 180:	9d 32       	cpi	r25, 0x2D	; 45
 182:	21 f0       	breq	.+8      	; 0x18c <String_parser+0xe0>
 184:	86 ed       	ldi	r24, 0xD6	; 214
 186:	86 0f       	add	r24, r22
 188:	82 30       	cpi	r24, 0x02	; 2
 18a:	38 f4       	brcc	.+14     	; 0x19a <String_parser+0xee>
		{
			output->operation = Buffer[i];
 18c:	e0 91 d4 00 	lds	r30, 0x00D4	; 0x8000d4 <__data_end>
 190:	f0 91 d5 00 	lds	r31, 0x00D5	; 0x8000d5 <__data_end+0x1>
 194:	66 83       	std	Z+6, r22	; 0x06
			op_count++;
 196:	1f 5f       	subi	r17, 0xFF	; 255
 198:	1c c0       	rjmp	.+56     	; 0x1d2 <String_parser+0x126>
		}
		else                                                                  //If found digit
		{
			if(op_count == 0)                                                 //Before operator
 19a:	11 11       	cpse	r17, r1
 19c:	05 c0       	rjmp	.+10     	; 0x1a8 <String_parser+0xfc>
			{
				FIFO_Enqueue(&Number1_FIFO, Buffer[i]);                       //store digit in operand 1
 19e:	8c ee       	ldi	r24, 0xEC	; 236
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 9f 01 	call	0x33e	; 0x33e <FIFO_Enqueue>
 1a6:	15 c0       	rjmp	.+42     	; 0x1d2 <String_parser+0x126>
			}
			else if(op_count == 1)                                            //After operator
 1a8:	11 30       	cpi	r17, 0x01	; 1
 1aa:	29 f4       	brne	.+10     	; 0x1b6 <String_parser+0x10a>
			{
				FIFO_Enqueue(&Number2_FIFO, Buffer[i]);                       //store digit in operand 2
 1ac:	89 ed       	ldi	r24, 0xD9	; 217
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 9f 01 	call	0x33e	; 0x33e <FIFO_Enqueue>
 1b4:	0e c0       	rjmp	.+28     	; 0x1d2 <String_parser+0x126>
			}
			else
			{
				output->error = CALC_OUT_OF_RANGE_ERR;                        //Return out of range error
 1b6:	e0 91 d4 00 	lds	r30, 0x00D4	; 0x8000d4 <__data_end>
 1ba:	f0 91 d5 00 	lds	r31, 0x00D5	; 0x8000d5 <__data_end+0x1>
 1be:	83 e0       	ldi	r24, 0x03	; 3
 1c0:	87 83       	std	Z+7, r24	; 0x07
				LCD_Send_Command(LCD_BEGIN_AT_SECOND_RAW);
 1c2:	80 ec       	ldi	r24, 0xC0	; 192
 1c4:	0e 94 33 02 	call	0x466	; 0x466 <LCD_Send_Command>
				LCD_display_String("CALC OUT OF RANGE ERR");
 1c8:	80 e7       	ldi	r24, 0x70	; 112
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <LCD_display_String>
				break;
 1d0:	03 c0       	rjmp	.+6      	; 0x1d8 <String_parser+0x12c>
	}
	
	uint8_t op_count = 0, i = 0;
	
	//If there are no syntax errors, start parsing
	while(i < length)
 1d2:	ec 16       	cp	r14, r28
 1d4:	fd 06       	cpc	r15, r29
 1d6:	89 f6       	brne	.-94     	; 0x17a <String_parser+0xce>
			}
		}
		i++;
	}
	//output->Number1 = (int16_t)atoi(Num1);
	output->Number2 = (int16_t)atoi(Num2);
 1d8:	c0 91 d4 00 	lds	r28, 0x00D4	; 0x8000d4 <__data_end>
 1dc:	d0 91 d5 00 	lds	r29, 0x00D5	; 0x8000d5 <__data_end+0x1>
 1e0:	86 ed       	ldi	r24, 0xD6	; 214
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 7e 03 	call	0x6fc	; 0x6fc <atoi>
 1e8:	9b 83       	std	Y+3, r25	; 0x03
 1ea:	8a 83       	std	Y+2, r24	; 0x02
	output->Number1 = (int16_t)atoi(Num1);
 1ec:	c0 91 d4 00 	lds	r28, 0x00D4	; 0x8000d4 <__data_end>
 1f0:	d0 91 d5 00 	lds	r29, 0x00D5	; 0x8000d5 <__data_end+0x1>
 1f4:	8a ef       	ldi	r24, 0xFA	; 250
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 7e 03 	call	0x6fc	; 0x6fc <atoi>
 1fc:	99 83       	std	Y+1, r25	; 0x01
 1fe:	88 83       	st	Y, r24
	
	
	switch(output->operation)
 200:	e0 91 d4 00 	lds	r30, 0x00D4	; 0x8000d4 <__data_end>
 204:	f0 91 d5 00 	lds	r31, 0x00D5	; 0x8000d5 <__data_end+0x1>
 208:	86 81       	ldd	r24, Z+6	; 0x06
 20a:	8b 32       	cpi	r24, 0x2B	; 43
 20c:	49 f0       	breq	.+18     	; 0x220 <String_parser+0x174>
 20e:	18 f4       	brcc	.+6      	; 0x216 <String_parser+0x16a>
 210:	8a 32       	cpi	r24, 0x2A	; 42
 212:	c1 f0       	breq	.+48     	; 0x244 <String_parser+0x198>
 214:	2d c0       	rjmp	.+90     	; 0x270 <String_parser+0x1c4>
 216:	8d 32       	cpi	r24, 0x2D	; 45
 218:	61 f0       	breq	.+24     	; 0x232 <String_parser+0x186>
 21a:	8f 32       	cpi	r24, 0x2F	; 47
 21c:	09 f1       	breq	.+66     	; 0x260 <String_parser+0x1b4>
 21e:	28 c0       	rjmp	.+80     	; 0x270 <String_parser+0x1c4>
	{
		case '+':
			output->Result = output->Number1 + output->Number2;
 220:	20 81       	ld	r18, Z
 222:	31 81       	ldd	r19, Z+1	; 0x01
 224:	82 81       	ldd	r24, Z+2	; 0x02
 226:	93 81       	ldd	r25, Z+3	; 0x03
 228:	82 0f       	add	r24, r18
 22a:	93 1f       	adc	r25, r19
 22c:	95 83       	std	Z+5, r25	; 0x05
 22e:	84 83       	std	Z+4, r24	; 0x04
			break;
 230:	1f c0       	rjmp	.+62     	; 0x270 <String_parser+0x1c4>
		case '-':
			output->Result = output->Number1 - output->Number2;
 232:	80 81       	ld	r24, Z
 234:	91 81       	ldd	r25, Z+1	; 0x01
 236:	22 81       	ldd	r18, Z+2	; 0x02
 238:	33 81       	ldd	r19, Z+3	; 0x03
 23a:	82 1b       	sub	r24, r18
 23c:	93 0b       	sbc	r25, r19
 23e:	95 83       	std	Z+5, r25	; 0x05
 240:	84 83       	std	Z+4, r24	; 0x04
			break;
 242:	16 c0       	rjmp	.+44     	; 0x270 <String_parser+0x1c4>
		case '*':
			output->Result = output->Number1 * output->Number2;
 244:	40 81       	ld	r20, Z
 246:	51 81       	ldd	r21, Z+1	; 0x01
 248:	22 81       	ldd	r18, Z+2	; 0x02
 24a:	33 81       	ldd	r19, Z+3	; 0x03
 24c:	42 9f       	mul	r20, r18
 24e:	c0 01       	movw	r24, r0
 250:	43 9f       	mul	r20, r19
 252:	90 0d       	add	r25, r0
 254:	52 9f       	mul	r21, r18
 256:	90 0d       	add	r25, r0
 258:	11 24       	eor	r1, r1
 25a:	95 83       	std	Z+5, r25	; 0x05
 25c:	84 83       	std	Z+4, r24	; 0x04
			break;
 25e:	08 c0       	rjmp	.+16     	; 0x270 <String_parser+0x1c4>
		case '/':
			output->Result = output->Number1 / output->Number2;
 260:	80 81       	ld	r24, Z
 262:	91 81       	ldd	r25, Z+1	; 0x01
 264:	62 81       	ldd	r22, Z+2	; 0x02
 266:	73 81       	ldd	r23, Z+3	; 0x03
 268:	0e 94 56 03 	call	0x6ac	; 0x6ac <__divmodhi4>
 26c:	75 83       	std	Z+5, r23	; 0x05
 26e:	64 83       	std	Z+4, r22	; 0x04
			break;
	}
	LCD_Send_Command(LCD_BEGIN_AT_SECOND_RAW);
 270:	80 ec       	ldi	r24, 0xC0	; 192
 272:	0e 94 33 02 	call	0x466	; 0x466 <LCD_Send_Command>
	itoa(output->Result, Output, 10);
 276:	e0 91 d4 00 	lds	r30, 0x00D4	; 0x8000d4 <__data_end>
 27a:	f0 91 d5 00 	lds	r31, 0x00D5	; 0x8000d5 <__data_end+0x1>
 27e:	4a e0       	ldi	r20, 0x0A	; 10
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	67 ee       	ldi	r22, 0xE7	; 231
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	84 81       	ldd	r24, Z+4	; 0x04
 288:	95 81       	ldd	r25, Z+5	; 0x05
 28a:	0e 94 9c 03 	call	0x738	; 0x738 <itoa>
	LCD_display_String(Output);
 28e:	87 ee       	ldi	r24, 0xE7	; 231
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <LCD_display_String>
}
 296:	0f c0       	rjmp	.+30     	; 0x2b6 <String_parser+0x20a>
	output->Number2 = 0;	
	output->operation = 0;
	output->error = CALC_NO_ERR;
	
	//Checking for syntax errors..
	for(uint8_t i=0 ; i<length ; i++)
 298:	ec 16       	cp	r14, r28
 29a:	fd 06       	cpc	r15, r29
 29c:	09 f0       	breq	.+2      	; 0x2a0 <String_parser+0x1f4>
 29e:	50 cf       	rjmp	.-352    	; 0x140 <String_parser+0x94>
 2a0:	e6 01       	movw	r28, r12
 2a2:	11 50       	subi	r17, 0x01	; 1
 2a4:	e1 2e       	mov	r14, r17
 2a6:	f1 2c       	mov	r15, r1
 2a8:	ff ef       	ldi	r31, 0xFF	; 255
 2aa:	ef 1a       	sub	r14, r31
 2ac:	ff 0a       	sbc	r15, r31
 2ae:	ec 0c       	add	r14, r12
 2b0:	fd 1c       	adc	r15, r13
{
	return (c=='+' || c=='-' || c=='*'|| c=='/' );
}

void String_parser(FIFO_t *Buffer, uint8_t length)
{
 2b2:	10 e0       	ldi	r17, 0x00	; 0
 2b4:	62 cf       	rjmp	.-316    	; 0x17a <String_parser+0xce>
			break;
	}
	LCD_Send_Command(LCD_BEGIN_AT_SECOND_RAW);
	itoa(output->Result, Output, 10);
	LCD_display_String(Output);
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	ff 90       	pop	r15
 2be:	ef 90       	pop	r14
 2c0:	df 90       	pop	r13
 2c2:	cf 90       	pop	r12
 2c4:	bf 90       	pop	r11
 2c6:	af 90       	pop	r10
 2c8:	08 95       	ret

000002ca <FIFO_INIT>:
#include "FIFO.h"
#include "stdio.h"
#include "stdint.h"

FIFO_Status FIFO_INIT( FIFO_Buffer_t* FIFO_buf , FIFO_t* buf , uint32_t length)
{
 2ca:	fc 01       	movw	r30, r24
	//check if FIFO buffer is exist
	if ( buf == NULL)
 2cc:	61 15       	cp	r22, r1
 2ce:	71 05       	cpc	r23, r1
 2d0:	81 f0       	breq	.+32     	; 0x2f2 <FIFO_INIT+0x28>
		return FIFO_NULL ;

	FIFO_buf->Base = buf ;
 2d2:	71 83       	std	Z+1, r23	; 0x01
 2d4:	60 83       	st	Z, r22
	FIFO_buf->head = FIFO_buf->Base ;
 2d6:	73 83       	std	Z+3, r23	; 0x03
 2d8:	62 83       	std	Z+2, r22	; 0x02
	FIFO_buf->tail = FIFO_buf->Base ;
 2da:	75 83       	std	Z+5, r23	; 0x05
 2dc:	64 83       	std	Z+4, r22	; 0x04
	FIFO_buf->length = length ;
 2de:	22 87       	std	Z+10, r18	; 0x0a
 2e0:	33 87       	std	Z+11, r19	; 0x0b
 2e2:	44 87       	std	Z+12, r20	; 0x0c
 2e4:	55 87       	std	Z+13, r21	; 0x0d
	FIFO_buf->count = 0 ;
 2e6:	16 82       	std	Z+6, r1	; 0x06
 2e8:	17 82       	std	Z+7, r1	; 0x07
 2ea:	10 86       	std	Z+8, r1	; 0x08
 2ec:	11 86       	std	Z+9, r1	; 0x09
	return FIFO_NO_ERROR ;
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	08 95       	ret

FIFO_Status FIFO_INIT( FIFO_Buffer_t* FIFO_buf , FIFO_t* buf , uint32_t length)
{
	//check if FIFO buffer is exist
	if ( buf == NULL)
		return FIFO_NULL ;
 2f2:	82 e0       	ldi	r24, 0x02	; 2
	FIFO_buf->head = FIFO_buf->Base ;
	FIFO_buf->tail = FIFO_buf->Base ;
	FIFO_buf->length = length ;
	FIFO_buf->count = 0 ;
	return FIFO_NO_ERROR ;
}
 2f4:	08 95       	ret

000002f6 <FIFO_IS_FULL>:
		return FIFO_ERROR ;
	}
}

FIFO_Status FIFO_IS_FULL ( FIFO_Buffer_t* FIFO_buf )
{
 2f6:	fc 01       	movw	r30, r24
	//check if FIFO buffer is exist
	if ( !FIFO_buf->head || !FIFO_buf->Base || !FIFO_buf->tail )
 2f8:	82 81       	ldd	r24, Z+2	; 0x02
 2fa:	93 81       	ldd	r25, Z+3	; 0x03
 2fc:	89 2b       	or	r24, r25
 2fe:	b9 f0       	breq	.+46     	; 0x32e <FIFO_IS_FULL+0x38>
 300:	80 81       	ld	r24, Z
 302:	91 81       	ldd	r25, Z+1	; 0x01
 304:	89 2b       	or	r24, r25
 306:	a9 f0       	breq	.+42     	; 0x332 <FIFO_IS_FULL+0x3c>
 308:	84 81       	ldd	r24, Z+4	; 0x04
 30a:	95 81       	ldd	r25, Z+5	; 0x05
 30c:	89 2b       	or	r24, r25
 30e:	99 f0       	breq	.+38     	; 0x336 <FIFO_IS_FULL+0x40>
		return FIFO_NULL ;

	//check if FIFO buffer is full
	if ( FIFO_buf->count == FIFO_buf->length )
 310:	46 81       	ldd	r20, Z+6	; 0x06
 312:	57 81       	ldd	r21, Z+7	; 0x07
 314:	60 85       	ldd	r22, Z+8	; 0x08
 316:	71 85       	ldd	r23, Z+9	; 0x09
 318:	82 85       	ldd	r24, Z+10	; 0x0a
 31a:	93 85       	ldd	r25, Z+11	; 0x0b
 31c:	a4 85       	ldd	r26, Z+12	; 0x0c
 31e:	b5 85       	ldd	r27, Z+13	; 0x0d
 320:	48 17       	cp	r20, r24
 322:	59 07       	cpc	r21, r25
 324:	6a 07       	cpc	r22, r26
 326:	7b 07       	cpc	r23, r27
 328:	41 f0       	breq	.+16     	; 0x33a <FIFO_IS_FULL+0x44>
		return FIFO_FULL ;

	return FIFO_NO_ERROR ;
 32a:	83 e0       	ldi	r24, 0x03	; 3
 32c:	08 95       	ret

FIFO_Status FIFO_IS_FULL ( FIFO_Buffer_t* FIFO_buf )
{
	//check if FIFO buffer is exist
	if ( !FIFO_buf->head || !FIFO_buf->Base || !FIFO_buf->tail )
		return FIFO_NULL ;
 32e:	82 e0       	ldi	r24, 0x02	; 2
 330:	08 95       	ret
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	08 95       	ret
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	08 95       	ret

	//check if FIFO buffer is full
	if ( FIFO_buf->count == FIFO_buf->length )
		return FIFO_FULL ;
 33a:	81 e0       	ldi	r24, 0x01	; 1

	return FIFO_NO_ERROR ;
}
 33c:	08 95       	ret

0000033e <FIFO_Enqueue>:
	FIFO_buf->count = 0 ;
	return FIFO_NO_ERROR ;
}

FIFO_Status FIFO_Enqueue( FIFO_Buffer_t* FIFO_buf , FIFO_t item )
{
 33e:	1f 93       	push	r17
 340:	cf 93       	push	r28
 342:	df 93       	push	r29
 344:	ec 01       	movw	r28, r24
 346:	16 2f       	mov	r17, r22
	//check if FIFO buffer is full
	if ( FIFO_IS_FULL( FIFO_buf ) == FIFO_NO_ERROR )
 348:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <FIFO_IS_FULL>
 34c:	83 30       	cpi	r24, 0x03	; 3
 34e:	f9 f4       	brne	.+62     	; 0x38e <FIFO_Enqueue+0x50>
	{
		//Circular FIFO
		if ( FIFO_buf->tail != FIFO_buf->Base )
 350:	28 81       	ld	r18, Y
 352:	39 81       	ldd	r19, Y+1	; 0x01
 354:	4c 81       	ldd	r20, Y+4	; 0x04
 356:	5d 81       	ldd	r21, Y+5	; 0x05
 358:	42 17       	cp	r20, r18
 35a:	53 07       	cpc	r21, r19
 35c:	11 f0       	breq	.+4      	; 0x362 <FIFO_Enqueue+0x24>
		    FIFO_buf->head = FIFO_buf->Base ;
 35e:	3b 83       	std	Y+3, r19	; 0x03
 360:	2a 83       	std	Y+2, r18	; 0x02

		*(FIFO_buf->head) = item ;
 362:	ea 81       	ldd	r30, Y+2	; 0x02
 364:	fb 81       	ldd	r31, Y+3	; 0x03
 366:	10 83       	st	Z, r17
		FIFO_buf->head++ ;
 368:	2a 81       	ldd	r18, Y+2	; 0x02
 36a:	3b 81       	ldd	r19, Y+3	; 0x03
 36c:	2f 5f       	subi	r18, 0xFF	; 255
 36e:	3f 4f       	sbci	r19, 0xFF	; 255
 370:	3b 83       	std	Y+3, r19	; 0x03
 372:	2a 83       	std	Y+2, r18	; 0x02
		FIFO_buf->count++;
 374:	4e 81       	ldd	r20, Y+6	; 0x06
 376:	5f 81       	ldd	r21, Y+7	; 0x07
 378:	68 85       	ldd	r22, Y+8	; 0x08
 37a:	79 85       	ldd	r23, Y+9	; 0x09
 37c:	4f 5f       	subi	r20, 0xFF	; 255
 37e:	5f 4f       	sbci	r21, 0xFF	; 255
 380:	6f 4f       	sbci	r22, 0xFF	; 255
 382:	7f 4f       	sbci	r23, 0xFF	; 255
 384:	4e 83       	std	Y+6, r20	; 0x06
 386:	5f 83       	std	Y+7, r21	; 0x07
 388:	68 87       	std	Y+8, r22	; 0x08
 38a:	79 87       	std	Y+9, r23	; 0x09
		return FIFO_NO_ERROR ;
 38c:	05 c0       	rjmp	.+10     	; 0x398 <FIFO_Enqueue+0x5a>
	}
	else
	{
		printf ("FIFO Eequeue is failed\n");
 38e:	86 e8       	ldi	r24, 0x86	; 134
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <puts>
		return FIFO_ERROR ;
 396:	84 e0       	ldi	r24, 0x04	; 4
	}
}
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	08 95       	ret

000003a0 <FIFO_IS_EMPTY>:
		return FIFO_FULL ;

	return FIFO_NO_ERROR ;
}
FIFO_Status FIFO_IS_EMPTY( FIFO_Buffer_t* FIFO_buf )
{
 3a0:	fc 01       	movw	r30, r24
	//check if FIFO buffer is exist
	if ( !FIFO_buf->head || !FIFO_buf->Base || !FIFO_buf->tail )
 3a2:	82 81       	ldd	r24, Z+2	; 0x02
 3a4:	93 81       	ldd	r25, Z+3	; 0x03
 3a6:	89 2b       	or	r24, r25
 3a8:	91 f0       	breq	.+36     	; 0x3ce <FIFO_IS_EMPTY+0x2e>
 3aa:	80 81       	ld	r24, Z
 3ac:	91 81       	ldd	r25, Z+1	; 0x01
 3ae:	89 2b       	or	r24, r25
 3b0:	81 f0       	breq	.+32     	; 0x3d2 <FIFO_IS_EMPTY+0x32>
 3b2:	84 81       	ldd	r24, Z+4	; 0x04
 3b4:	95 81       	ldd	r25, Z+5	; 0x05
 3b6:	89 2b       	or	r24, r25
 3b8:	71 f0       	breq	.+28     	; 0x3d6 <FIFO_IS_EMPTY+0x36>
		return FIFO_NULL ;

	//check if FIFO buffer is empty
	if ( FIFO_buf->count == 0 )
 3ba:	86 81       	ldd	r24, Z+6	; 0x06
 3bc:	97 81       	ldd	r25, Z+7	; 0x07
 3be:	a0 85       	ldd	r26, Z+8	; 0x08
 3c0:	b1 85       	ldd	r27, Z+9	; 0x09
 3c2:	89 2b       	or	r24, r25
 3c4:	8a 2b       	or	r24, r26
 3c6:	8b 2b       	or	r24, r27
 3c8:	41 f0       	breq	.+16     	; 0x3da <FIFO_IS_EMPTY+0x3a>
		return FIFO_EMPTY ;

	return FIFO_NO_ERROR ;
 3ca:	83 e0       	ldi	r24, 0x03	; 3
 3cc:	08 95       	ret
}
FIFO_Status FIFO_IS_EMPTY( FIFO_Buffer_t* FIFO_buf )
{
	//check if FIFO buffer is exist
	if ( !FIFO_buf->head || !FIFO_buf->Base || !FIFO_buf->tail )
		return FIFO_NULL ;
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	08 95       	ret
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	08 95       	ret
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	08 95       	ret

	//check if FIFO buffer is empty
	if ( FIFO_buf->count == 0 )
		return FIFO_EMPTY ;
 3da:	80 e0       	ldi	r24, 0x00	; 0

	return FIFO_NO_ERROR ;
 3dc:	08 95       	ret

000003de <Keypad_INIT>:
	
	
void Keypad_INIT(void)
{
	//Set rows as output
	KEYPAD_DDR |= (1U<<ROW0) | (1U<<ROW1) | (1U<<ROW2) | (1U<<ROW3);
 3de:	81 b3       	in	r24, 0x11	; 17
 3e0:	8f 60       	ori	r24, 0x0F	; 15
 3e2:	81 bb       	out	0x11, r24	; 17
	
	//Set colums as input
	KEYPAD_DDR &= ~(1U<<COLUM0) | (1U<<COLUM1) | (1U<<COLUM2) | (1U<<COLUM3);
 3e4:	8c 98       	cbi	0x11, 4	; 17
	
	//Input is connected to pull up so it reads (1) by default
	//Initialize rows to no output state (1)
	KEYPAD_PORT = NO_VALID_INPUT;
 3e6:	8f ef       	ldi	r24, 0xFF	; 255
 3e8:	82 bb       	out	0x12, r24	; 18
 3ea:	08 95       	ret

000003ec <Keypad_Get_Character>:
	uint8_t row;
	uint8_t	colum = NO_VALID_INPUT;
	unsigned char result = NO_VALID_INPUT;
	
	//loop on rows
	for (row=0;row<4;row++)
 3ec:	e0 e0       	ldi	r30, 0x00	; 0
	{
		//set rows to no output state (1)
		KEYPAD_PORT |= (NO_OUTPUT_STATE<<ROW0);
 3ee:	90 9a       	sbi	0x12, 0	; 18
		KEYPAD_PORT |= (NO_OUTPUT_STATE<<ROW1);
 3f0:	91 9a       	sbi	0x12, 1	; 18
		KEYPAD_PORT |= (NO_OUTPUT_STATE<<ROW2);
 3f2:	92 9a       	sbi	0x12, 2	; 18
		KEYPAD_PORT |= (NO_OUTPUT_STATE<<ROW3);
 3f4:	93 9a       	sbi	0x12, 3	; 18
		
		//set the numbered row to output state (0)
		switch (row)
 3f6:	e1 30       	cpi	r30, 0x01	; 1
 3f8:	41 f0       	breq	.+16     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3fa:	28 f0       	brcs	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fc:	e2 30       	cpi	r30, 0x02	; 2
 3fe:	39 f0       	breq	.+14     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 400:	e3 30       	cpi	r30, 0x03	; 3
 402:	39 f0       	breq	.+14     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 404:	07 c0       	rjmp	.+14     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		{
			case 0:KEYPAD_PORT &= ~(OUTPUT_STATE<<ROW0);break;
 406:	90 98       	cbi	0x12, 0	; 18
 408:	05 c0       	rjmp	.+10     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
			case 1:KEYPAD_PORT &= ~(OUTPUT_STATE<<ROW1);break;
 40a:	91 98       	cbi	0x12, 1	; 18
 40c:	03 c0       	rjmp	.+6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
			case 2:KEYPAD_PORT &= ~(OUTPUT_STATE<<ROW2);break;
 40e:	92 98       	cbi	0x12, 2	; 18
 410:	01 c0       	rjmp	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
			case 3:KEYPAD_PORT &= ~(OUTPUT_STATE<<ROW3);break;
 412:	93 98       	cbi	0x12, 3	; 18
			default:break;
		}
		
		//check inputs
		if ((KEYPAD_PIN & (1U<<COLUM0)) == INPUT_STATE)		    {colum = 0;}
 414:	84 9b       	sbis	0x10, 4	; 16
 416:	1a c0       	rjmp	.+52     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		else if ((KEYPAD_PIN & (1U<<COLUM1)) == INPUT_STATE)	{colum = 1;}
 418:	85 9b       	sbis	0x10, 5	; 16
 41a:	1a c0       	rjmp	.+52     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
		else if ((KEYPAD_PIN & (1U<<COLUM2)) == INPUT_STATE)	{colum = 2;}
 41c:	86 9b       	sbis	0x10, 6	; 16
 41e:	1a c0       	rjmp	.+52     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		else if ((KEYPAD_PIN & (1U<<COLUM3)) == INPUT_STATE)	{colum = 3;}
 420:	87 9b       	sbis	0x10, 7	; 16
 422:	1a c0       	rjmp	.+52     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 424:	1b c0       	rjmp	.+54     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
			
		//if there was a valid input
		if (colum != NO_VALID_INPUT)
		{
			//wait until the input is gone
			while (INPUT_IS_STILL_VALID == INPUT_STATE);
 426:	84 9b       	sbis	0x10, 4	; 16
 428:	fe cf       	rjmp	.-4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 42a:	85 9b       	sbis	0x10, 5	; 16
 42c:	fc cf       	rjmp	.-8      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 42e:	86 9b       	sbis	0x10, 6	; 16
 430:	fa cf       	rjmp	.-12     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 432:	87 9b       	sbis	0x10, 7	; 16
 434:	f8 cf       	rjmp	.-16     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
			
			//return the mapped key to this input
			result = g_Keypad_Mapping[row][colum];
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	ee 0f       	add	r30, r30
 43a:	ff 1f       	adc	r31, r31
 43c:	ee 0f       	add	r30, r30
 43e:	ff 1f       	adc	r31, r31
 440:	ec 54       	subi	r30, 0x4C	; 76
 442:	ff 4f       	sbci	r31, 0xFF	; 255
 444:	e8 0f       	add	r30, r24
 446:	f1 1d       	adc	r31, r1
 448:	80 81       	ld	r24, Z
			break;
 44a:	08 95       	ret
			case 3:KEYPAD_PORT &= ~(OUTPUT_STATE<<ROW3);break;
			default:break;
		}
		
		//check inputs
		if ((KEYPAD_PIN & (1U<<COLUM0)) == INPUT_STATE)		    {colum = 0;}
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	eb cf       	rjmp	.-42     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		else if ((KEYPAD_PIN & (1U<<COLUM1)) == INPUT_STATE)	{colum = 1;}
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	e9 cf       	rjmp	.-46     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		else if ((KEYPAD_PIN & (1U<<COLUM2)) == INPUT_STATE)	{colum = 2;}
 454:	82 e0       	ldi	r24, 0x02	; 2
 456:	e7 cf       	rjmp	.-50     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		else if ((KEYPAD_PIN & (1U<<COLUM3)) == INPUT_STATE)	{colum = 3;}
 458:	83 e0       	ldi	r24, 0x03	; 3
 45a:	e5 cf       	rjmp	.-54     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	uint8_t row;
	uint8_t	colum = NO_VALID_INPUT;
	unsigned char result = NO_VALID_INPUT;
	
	//loop on rows
	for (row=0;row<4;row++)
 45c:	ef 5f       	subi	r30, 0xFF	; 255
 45e:	e4 30       	cpi	r30, 0x04	; 4
 460:	31 f6       	brne	.-116    	; 0x3ee <Keypad_Get_Character+0x2>

unsigned char Keypad_Get_Character(void)
{
	uint8_t row;
	uint8_t	colum = NO_VALID_INPUT;
	unsigned char result = NO_VALID_INPUT;
 462:	8f ef       	ldi	r24, 0xFF	; 255
			break;
		}
		
	}
	return result;
}
 464:	08 95       	ret

00000466 <LCD_Send_Command>:
	LCD_Send_Command(LCD_BEGIN_AT_FIRST_RAW);
}

void LCD_Send_Command( uint8 command )
{
	LCD_CTRL_PORT &=~ (1<<RS) | (1<<RW);  // Configure the control pin RS command mode, RW write mode
 466:	c1 98       	cbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 468:	ef ec       	ldi	r30, 0xCF	; 207
 46a:	f7 e0       	ldi	r31, 0x07	; 7
 46c:	31 97       	sbiw	r30, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <LCD_Send_Command+0x6>
 470:	00 c0       	rjmp	.+0      	; 0x472 <LCD_Send_Command+0xc>
 472:	00 00       	nop
	_delay_ms(1);                         // delay for processing Tas = 50ns
	LCD_CTRL_PORT |= (1<<E);              // Enable LCD
 474:	c3 9a       	sbi	0x18, 3	; 24
 476:	ef ec       	ldi	r30, 0xCF	; 207
 478:	f7 e0       	ldi	r31, 0x07	; 7
 47a:	31 97       	sbiw	r30, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <LCD_Send_Command+0x14>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <LCD_Send_Command+0x1a>
 480:	00 00       	nop
	_delay_ms(1);                         // delay for processing Tpw - Tdws = 190ns
	
	#if (DATA_BITS_MODE == 4)             // if LCD Data bits configuration mode is 4 bits
	    // out the highest 4 bits of the required command to the data bus D4 --> D7
		#ifdef UPPER_PORT_PINS
		LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
 482:	9b b3       	in	r25, 0x1b	; 27
 484:	9f 70       	andi	r25, 0x0F	; 15
 486:	28 2f       	mov	r18, r24
 488:	20 7f       	andi	r18, 0xF0	; 240
 48a:	92 2b       	or	r25, r18
 48c:	9b bb       	out	0x1b, r25	; 27
 48e:	ef ec       	ldi	r30, 0xCF	; 207
 490:	f7 e0       	ldi	r31, 0x07	; 7
 492:	31 97       	sbiw	r30, 0x01	; 1
 494:	f1 f7       	brne	.-4      	; 0x492 <LCD_Send_Command+0x2c>
 496:	00 c0       	rjmp	.+0      	; 0x498 <LCD_Send_Command+0x32>
 498:	00 00       	nop
		#else
		LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4));
		#endif
		
		_delay_ms(1);                     // delay for processing Tdsw = 100ns
		LCD_CTRL_PORT &=~ (1<<E);         // disable LCD
 49a:	c3 98       	cbi	0x18, 3	; 24
 49c:	ef ec       	ldi	r30, 0xCF	; 207
 49e:	f7 e0       	ldi	r31, 0x07	; 7
 4a0:	31 97       	sbiw	r30, 0x01	; 1
 4a2:	f1 f7       	brne	.-4      	; 0x4a0 <LCD_Send_Command+0x3a>
 4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <LCD_Send_Command+0x40>
 4a6:	00 00       	nop
		_delay_ms(1);                     // delay for processing Th = 13ns
		LCD_CTRL_PORT |= (1<<E);          // Enable LCD 
 4a8:	c3 9a       	sbi	0x18, 3	; 24
 4aa:	ef ec       	ldi	r30, 0xCF	; 207
 4ac:	f7 e0       	ldi	r31, 0x07	; 7
 4ae:	31 97       	sbiw	r30, 0x01	; 1
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <LCD_Send_Command+0x48>
 4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <LCD_Send_Command+0x4e>
 4b4:	00 00       	nop
		_delay_ms(1);                     // delay for processing Tpw - Tdws = 190ns 
		
		// out the lowest 4 bits of the required command to the data bus D4 --> D7
		#ifdef UPPER_PORT_PINS
		LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
 4b6:	2b b3       	in	r18, 0x1b	; 27
 4b8:	2f 70       	andi	r18, 0x0F	; 15
 4ba:	f0 e1       	ldi	r31, 0x10	; 16
 4bc:	8f 9f       	mul	r24, r31
 4be:	c0 01       	movw	r24, r0
 4c0:	11 24       	eor	r1, r1
 4c2:	82 2b       	or	r24, r18
 4c4:	8b bb       	out	0x1b, r24	; 27
 4c6:	8f ec       	ldi	r24, 0xCF	; 207
 4c8:	97 e0       	ldi	r25, 0x07	; 7
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	f1 f7       	brne	.-4      	; 0x4ca <LCD_Send_Command+0x64>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <LCD_Send_Command+0x6a>
 4d0:	00 00       	nop
		#else
		LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
		#endif

		_delay_ms(1);                     // delay for processing Tdsw = 100ns
		LCD_CTRL_PORT &=~ (1<<E);         // disable LCD E=0
 4d2:	c3 98       	cbi	0x18, 3	; 24
 4d4:	ef ec       	ldi	r30, 0xCF	; 207
 4d6:	f7 e0       	ldi	r31, 0x07	; 7
 4d8:	31 97       	sbiw	r30, 0x01	; 1
 4da:	f1 f7       	brne	.-4      	; 0x4d8 <LCD_Send_Command+0x72>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <LCD_Send_Command+0x78>
 4de:	00 00       	nop
 4e0:	08 95       	ret

000004e2 <LCD_Clear_Screen>:
 *******************************************************************************/
#include "LCD.h"

void LCD_Clear_Screen()
{
	LCD_Send_Command(CLEAR_COMMAND);
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	0e 94 33 02 	call	0x466	; 0x466 <LCD_Send_Command>
 4e8:	08 95       	ret

000004ea <LCD_INIT>:
 4ea:	8f e3       	ldi	r24, 0x3F	; 63
 4ec:	9c e9       	ldi	r25, 0x9C	; 156
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <LCD_INIT+0x4>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <LCD_INIT+0xa>
 4f4:	00 00       	nop

void LCD_INIT()
{
	_delay_ms(20);
	// Configure the control pins(E,RS,RW) as output pins
	LCD_CTRL_DDR  |= (1<<E) | (1<<RS) | (1<<RW);
 4f6:	87 b3       	in	r24, 0x17	; 23
 4f8:	8e 60       	ori	r24, 0x0E	; 14
 4fa:	87 bb       	out	0x17, r24	; 23
	
    #if (DATA_BITS_MODE == 4)    // if LCD Data bits configuration mode is 4 bits
		#ifdef UPPER_PORT_PINS
		LCD_DATA_DDR |= 0xF0;    // Configure the highest 4 bits of the data port as output pins
 4fc:	8a b3       	in	r24, 0x1a	; 26
 4fe:	80 6f       	ori	r24, 0xF0	; 240
 500:	8a bb       	out	0x1a, r24	; 26
		#else
		LCD_DATA_DDR |= 0x0F;    // Configure the lowest 4 bits of the data port as output pins
		#endif
		
		// initialize LCD in 4-bit mode
		LCD_Send_Command(FOUR_BITS_DATA_MODE);
 502:	82 e0       	ldi	r24, 0x02	; 2
 504:	0e 94 33 02 	call	0x466	; 0x466 <LCD_Send_Command>
		
		// use 2 line lcd + 4 bit Data Mode + 5*7 dot display Mode
		LCD_Send_Command(LCD_2LINE_4BIT_MODE);
 508:	88 e2       	ldi	r24, 0x28	; 40
 50a:	0e 94 33 02 	call	0x466	; 0x466 <LCD_Send_Command>
		// use 2 line lcd + 8 bit Data Mode + 5*7 dot display Mode
		LCD_Send_Command(LCD_2LINE_8BIT_MODE);
		
	#endif
	
	LCD_Send_Command(LCD_ENTRY_MODE);
 50e:	86 e0       	ldi	r24, 0x06	; 6
 510:	0e 94 33 02 	call	0x466	; 0x466 <LCD_Send_Command>
	LCD_Send_Command(CLEAR_COMMAND);
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	0e 94 33 02 	call	0x466	; 0x466 <LCD_Send_Command>
	LCD_Send_Command(LCD_DISP_ON_CURSOR_BLINK);
 51a:	8f e0       	ldi	r24, 0x0F	; 15
 51c:	0e 94 33 02 	call	0x466	; 0x466 <LCD_Send_Command>
	LCD_Send_Command(LCD_BEGIN_AT_FIRST_RAW);
 520:	80 e8       	ldi	r24, 0x80	; 128
 522:	0e 94 33 02 	call	0x466	; 0x466 <LCD_Send_Command>
 526:	08 95       	ret

00000528 <LCD_Display_Character>:
	#endif	
}

void LCD_Display_Character( uint8 data )
{
	LCD_CTRL_PORT |= (1<<RS);             // Configure the control pin RS data mode
 528:	c1 9a       	sbi	0x18, 1	; 24
	LCD_CTRL_PORT &=~(1<<RW);             // Configure the control pin RW write mode
 52a:	c2 98       	cbi	0x18, 2	; 24
 52c:	ef ec       	ldi	r30, 0xCF	; 207
 52e:	f7 e0       	ldi	r31, 0x07	; 7
 530:	31 97       	sbiw	r30, 0x01	; 1
 532:	f1 f7       	brne	.-4      	; 0x530 <LCD_Display_Character+0x8>
 534:	00 c0       	rjmp	.+0      	; 0x536 <LCD_Display_Character+0xe>
 536:	00 00       	nop
	_delay_ms(1);                         // delay for processing Tas = 50ns
	LCD_CTRL_PORT |= (1<<E);              // Enable LCD
 538:	c3 9a       	sbi	0x18, 3	; 24
 53a:	ef ec       	ldi	r30, 0xCF	; 207
 53c:	f7 e0       	ldi	r31, 0x07	; 7
 53e:	31 97       	sbiw	r30, 0x01	; 1
 540:	f1 f7       	brne	.-4      	; 0x53e <LCD_Display_Character+0x16>
 542:	00 c0       	rjmp	.+0      	; 0x544 <LCD_Display_Character+0x1c>
 544:	00 00       	nop
	_delay_ms(1);                         // delay for processing Tpw - Tdws = 190ns
	
	#if (DATA_BITS_MODE == 4)             // if LCD Data bits configuration mode is 4 bits
	// out the highest 4 bits of the required data to the data bus D4 --> D7
	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
 546:	9b b3       	in	r25, 0x1b	; 27
 548:	9f 70       	andi	r25, 0x0F	; 15
 54a:	28 2f       	mov	r18, r24
 54c:	20 7f       	andi	r18, 0xF0	; 240
 54e:	92 2b       	or	r25, r18
 550:	9b bb       	out	0x1b, r25	; 27
 552:	ef ec       	ldi	r30, 0xCF	; 207
 554:	f7 e0       	ldi	r31, 0x07	; 7
 556:	31 97       	sbiw	r30, 0x01	; 1
 558:	f1 f7       	brne	.-4      	; 0x556 <LCD_Display_Character+0x2e>
 55a:	00 c0       	rjmp	.+0      	; 0x55c <LCD_Display_Character+0x34>
 55c:	00 00       	nop
	#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4));
	#endif
	
	_delay_ms(1);                     // delay for processing Tdsw = 100ns
	LCD_CTRL_PORT &=~ (1<<E);         // disable LCD
 55e:	c3 98       	cbi	0x18, 3	; 24
 560:	ef ec       	ldi	r30, 0xCF	; 207
 562:	f7 e0       	ldi	r31, 0x07	; 7
 564:	31 97       	sbiw	r30, 0x01	; 1
 566:	f1 f7       	brne	.-4      	; 0x564 <LCD_Display_Character+0x3c>
 568:	00 c0       	rjmp	.+0      	; 0x56a <LCD_Display_Character+0x42>
 56a:	00 00       	nop
	_delay_ms(1);                     // delay for processing Th = 13ns
	LCD_CTRL_PORT |= (1<<E);          // Enable LCD
 56c:	c3 9a       	sbi	0x18, 3	; 24
 56e:	ef ec       	ldi	r30, 0xCF	; 207
 570:	f7 e0       	ldi	r31, 0x07	; 7
 572:	31 97       	sbiw	r30, 0x01	; 1
 574:	f1 f7       	brne	.-4      	; 0x572 <LCD_Display_Character+0x4a>
 576:	00 c0       	rjmp	.+0      	; 0x578 <LCD_Display_Character+0x50>
 578:	00 00       	nop
	_delay_ms(1);                     // delay for processing Tpw - Tdws = 190ns
	
	// out the lowest 4 bits of the required data to the data bus D4 --> D7
	#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
 57a:	2b b3       	in	r18, 0x1b	; 27
 57c:	2f 70       	andi	r18, 0x0F	; 15
 57e:	f0 e1       	ldi	r31, 0x10	; 16
 580:	8f 9f       	mul	r24, r31
 582:	c0 01       	movw	r24, r0
 584:	11 24       	eor	r1, r1
 586:	82 2b       	or	r24, r18
 588:	8b bb       	out	0x1b, r24	; 27
 58a:	8f ec       	ldi	r24, 0xCF	; 207
 58c:	97 e0       	ldi	r25, 0x07	; 7
 58e:	01 97       	sbiw	r24, 0x01	; 1
 590:	f1 f7       	brne	.-4      	; 0x58e <LCD_Display_Character+0x66>
 592:	00 c0       	rjmp	.+0      	; 0x594 <LCD_Display_Character+0x6c>
 594:	00 00       	nop
	#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
	#endif

	_delay_ms(1);                     // delay for processing Tdsw = 100ns
	LCD_CTRL_PORT &=~ (1<<E);         // disable LCD E=0
 596:	c3 98       	cbi	0x18, 3	; 24
 598:	ef ec       	ldi	r30, 0xCF	; 207
 59a:	f7 e0       	ldi	r31, 0x07	; 7
 59c:	31 97       	sbiw	r30, 0x01	; 1
 59e:	f1 f7       	brne	.-4      	; 0x59c <LCD_Display_Character+0x74>
 5a0:	00 c0       	rjmp	.+0      	; 0x5a2 <LCD_Display_Character+0x7a>
 5a2:	00 00       	nop
 5a4:	08 95       	ret

000005a6 <LCD_display_String>:
	
	#endif
}

void LCD_display_String( const char *Str )
{
 5a6:	0f 93       	push	r16
 5a8:	1f 93       	push	r17
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	8c 01       	movw	r16, r24
	uint16_t count = 0;
 5b0:	c0 e0       	ldi	r28, 0x00	; 0
 5b2:	d0 e0       	ldi	r29, 0x00	; 0
	
	//Display character by character utill end the string
	while( *Str != '\0' )
 5b4:	1e c0       	rjmp	.+60     	; 0x5f2 <LCD_display_String+0x4c>
	{
		LCD_Display_Character( *Str++ );
 5b6:	0e 94 94 02 	call	0x528	; 0x528 <LCD_Display_Character>
		count++;
 5ba:	21 96       	adiw	r28, 0x01	; 1
		if( count == 16 )
 5bc:	c0 31       	cpi	r28, 0x10	; 16
 5be:	d1 05       	cpc	r29, r1
 5c0:	21 f4       	brne	.+8      	; 0x5ca <LCD_display_String+0x24>
		{
			LCD_Send_Command(LCD_BEGIN_AT_SECOND_RAW);
 5c2:	80 ec       	ldi	r24, 0xC0	; 192
 5c4:	0e 94 33 02 	call	0x466	; 0x466 <LCD_Send_Command>
 5c8:	14 c0       	rjmp	.+40     	; 0x5f2 <LCD_display_String+0x4c>
		}
		else if (count == 32)
 5ca:	c0 32       	cpi	r28, 0x20	; 32
 5cc:	d1 05       	cpc	r29, r1
 5ce:	89 f4       	brne	.+34     	; 0x5f2 <LCD_display_String+0x4c>
 5d0:	2f ef       	ldi	r18, 0xFF	; 255
 5d2:	89 e6       	ldi	r24, 0x69	; 105
 5d4:	98 e1       	ldi	r25, 0x18	; 24
 5d6:	21 50       	subi	r18, 0x01	; 1
 5d8:	80 40       	sbci	r24, 0x00	; 0
 5da:	90 40       	sbci	r25, 0x00	; 0
 5dc:	e1 f7       	brne	.-8      	; 0x5d6 <LCD_display_String+0x30>
 5de:	00 c0       	rjmp	.+0      	; 0x5e0 <LCD_display_String+0x3a>
 5e0:	00 00       	nop
		{
			_delay_ms(1000);
			LCD_Send_Command(CLEAR_COMMAND);
 5e2:	81 e0       	ldi	r24, 0x01	; 1
 5e4:	0e 94 33 02 	call	0x466	; 0x466 <LCD_Send_Command>
			LCD_Send_Command(LCD_BEGIN_AT_FIRST_RAW);
 5e8:	80 e8       	ldi	r24, 0x80	; 128
 5ea:	0e 94 33 02 	call	0x466	; 0x466 <LCD_Send_Command>
			count = 0;
 5ee:	c0 e0       	ldi	r28, 0x00	; 0
 5f0:	d0 e0       	ldi	r29, 0x00	; 0
void LCD_display_String( const char *Str )
{
	uint16_t count = 0;
	
	//Display character by character utill end the string
	while( *Str != '\0' )
 5f2:	f8 01       	movw	r30, r16
 5f4:	81 91       	ld	r24, Z+
 5f6:	8f 01       	movw	r16, r30
 5f8:	81 11       	cpse	r24, r1
 5fa:	dd cf       	rjmp	.-70     	; 0x5b6 <LCD_display_String+0x10>
			LCD_Send_Command(CLEAR_COMMAND);
			LCD_Send_Command(LCD_BEGIN_AT_FIRST_RAW);
			count = 0;
		}
	}
}
 5fc:	df 91       	pop	r29
 5fe:	cf 91       	pop	r28
 600:	1f 91       	pop	r17
 602:	0f 91       	pop	r16
 604:	08 95       	ret

00000606 <main>:
	unsigned char key = NO_VALID_INPUT;
	uint8_t Length = 0;                                 //calculate length of the input buffer
	string_parser_output_t *parser_output = NULL;       //Pointer to take the return of the string parser as a struct
	
    //Initialization LCD and Keypad
	LCD_INIT();
 606:	0e 94 75 02 	call	0x4ea	; 0x4ea <LCD_INIT>
	Keypad_INIT();
 60a:	0e 94 ef 01 	call	0x3de	; 0x3de <Keypad_INIT>
	
	//Initialization string parser output FIFO
	FIFO_INIT(&Input_FIFO, string_parser_input, string_parser_input_index);
 60e:	20 e1       	ldi	r18, 0x10	; 16
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	40 e0       	ldi	r20, 0x00	; 0
 614:	50 e0       	ldi	r21, 0x00	; 0
 616:	6b e1       	ldi	r22, 0x1B	; 27
 618:	71 e0       	ldi	r23, 0x01	; 1
 61a:	8d e0       	ldi	r24, 0x0D	; 13
 61c:	91 e0       	ldi	r25, 0x01	; 1
 61e:	0e 94 65 01 	call	0x2ca	; 0x2ca <FIFO_INIT>


int main(void)
{
	unsigned char key = NO_VALID_INPUT;
	uint8_t Length = 0;                                 //calculate length of the input buffer
 622:	d0 e0       	ldi	r29, 0x00	; 0
	FIFO_INIT(&Input_FIFO, string_parser_input, string_parser_input_index);
	
    while (1)
    {
	    //Scan Character from Keypad
	    key = Keypad_Get_Character();
 624:	0e 94 f6 01 	call	0x3ec	; 0x3ec <Keypad_Get_Character>
 628:	c8 2f       	mov	r28, r24
		
		//If I pressed any buttom
		if (key != NO_VALID_INPUT)
 62a:	8f 3f       	cpi	r24, 0xFF	; 255
 62c:	d9 f3       	breq	.-10     	; 0x624 <main+0x1e>
		{
			//check if key is number or character
			if (key == 'C')
 62e:	83 34       	cpi	r24, 0x43	; 67
 630:	69 f4       	brne	.+26     	; 0x64c <main+0x46>
			{
				LCD_Clear_Screen();
 632:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCD_Clear_Screen>
				FIFO_INIT(&Input_FIFO, string_parser_input, string_parser_input_index);
 636:	20 e1       	ldi	r18, 0x10	; 16
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	40 e0       	ldi	r20, 0x00	; 0
 63c:	50 e0       	ldi	r21, 0x00	; 0
 63e:	6b e1       	ldi	r22, 0x1B	; 27
 640:	71 e0       	ldi	r23, 0x01	; 1
 642:	8d e0       	ldi	r24, 0x0D	; 13
 644:	91 e0       	ldi	r25, 0x01	; 1
 646:	0e 94 65 01 	call	0x2ca	; 0x2ca <FIFO_INIT>
				continue;
 64a:	ec cf       	rjmp	.-40     	; 0x624 <main+0x1e>
			}
			else
			{
				LCD_Display_Character(key);
 64c:	0e 94 94 02 	call	0x528	; 0x528 <LCD_Display_Character>
				FIFO_Enqueue(&Input_FIFO, key);
 650:	6c 2f       	mov	r22, r28
 652:	8d e0       	ldi	r24, 0x0D	; 13
 654:	91 e0       	ldi	r25, 0x01	; 1
 656:	0e 94 9f 01 	call	0x33e	; 0x33e <FIFO_Enqueue>
				
				if (key == '=')
 65a:	cd 33       	cpi	r28, 0x3D	; 61
 65c:	29 f5       	brne	.+74     	; 0x6a8 <main+0xa2>
				{
					if (FIFO_IS_EMPTY(&Input_FIFO) == FIFO_EMPTY)
 65e:	8d e0       	ldi	r24, 0x0D	; 13
 660:	91 e0       	ldi	r25, 0x01	; 1
 662:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <FIFO_IS_EMPTY>
 666:	81 11       	cpse	r24, r1
 668:	1a c0       	rjmp	.+52     	; 0x69e <main+0x98>
					{
						LCD_display_String("NO VALID INPUT");
 66a:	84 ec       	ldi	r24, 0xC4	; 196
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <LCD_display_String>
 672:	2f ef       	ldi	r18, 0xFF	; 255
 674:	89 e6       	ldi	r24, 0x69	; 105
 676:	98 e1       	ldi	r25, 0x18	; 24
 678:	21 50       	subi	r18, 0x01	; 1
 67a:	80 40       	sbci	r24, 0x00	; 0
 67c:	90 40       	sbci	r25, 0x00	; 0
 67e:	e1 f7       	brne	.-8      	; 0x678 <main+0x72>
 680:	00 c0       	rjmp	.+0      	; 0x682 <main+0x7c>
 682:	00 00       	nop
						_delay_ms(1000);
						LCD_Clear_Screen();
 684:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCD_Clear_Screen>
						FIFO_INIT(&Input_FIFO, string_parser_input, string_parser_input_index);
 688:	20 e1       	ldi	r18, 0x10	; 16
 68a:	30 e0       	ldi	r19, 0x00	; 0
 68c:	40 e0       	ldi	r20, 0x00	; 0
 68e:	50 e0       	ldi	r21, 0x00	; 0
 690:	6b e1       	ldi	r22, 0x1B	; 27
 692:	71 e0       	ldi	r23, 0x01	; 1
 694:	8d e0       	ldi	r24, 0x0D	; 13
 696:	91 e0       	ldi	r25, 0x01	; 1
 698:	0e 94 65 01 	call	0x2ca	; 0x2ca <FIFO_INIT>
 69c:	05 c0       	rjmp	.+10     	; 0x6a8 <main+0xa2>
					}
					else
					{
						//Parse the input data and get the operands, operation, and errors in a struct
						String_parser(string_parser_input, Length);
 69e:	6d 2f       	mov	r22, r29
 6a0:	8b e1       	ldi	r24, 0x1B	; 27
 6a2:	91 e0       	ldi	r25, 0x01	; 1
 6a4:	0e 94 56 00 	call	0xac	; 0xac <String_parser>
					}
				}
				Length++;
 6a8:	df 5f       	subi	r29, 0xFF	; 255
 6aa:	bc cf       	rjmp	.-136    	; 0x624 <main+0x1e>

000006ac <__divmodhi4>:
 6ac:	97 fb       	bst	r25, 7
 6ae:	07 2e       	mov	r0, r23
 6b0:	16 f4       	brtc	.+4      	; 0x6b6 <__divmodhi4+0xa>
 6b2:	00 94       	com	r0
 6b4:	07 d0       	rcall	.+14     	; 0x6c4 <__divmodhi4_neg1>
 6b6:	77 fd       	sbrc	r23, 7
 6b8:	09 d0       	rcall	.+18     	; 0x6cc <__divmodhi4_neg2>
 6ba:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__udivmodhi4>
 6be:	07 fc       	sbrc	r0, 7
 6c0:	05 d0       	rcall	.+10     	; 0x6cc <__divmodhi4_neg2>
 6c2:	3e f4       	brtc	.+14     	; 0x6d2 <__divmodhi4_exit>

000006c4 <__divmodhi4_neg1>:
 6c4:	90 95       	com	r25
 6c6:	81 95       	neg	r24
 6c8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ca:	08 95       	ret

000006cc <__divmodhi4_neg2>:
 6cc:	70 95       	com	r23
 6ce:	61 95       	neg	r22
 6d0:	7f 4f       	sbci	r23, 0xFF	; 255

000006d2 <__divmodhi4_exit>:
 6d2:	08 95       	ret

000006d4 <__udivmodhi4>:
 6d4:	aa 1b       	sub	r26, r26
 6d6:	bb 1b       	sub	r27, r27
 6d8:	51 e1       	ldi	r21, 0x11	; 17
 6da:	07 c0       	rjmp	.+14     	; 0x6ea <__udivmodhi4_ep>

000006dc <__udivmodhi4_loop>:
 6dc:	aa 1f       	adc	r26, r26
 6de:	bb 1f       	adc	r27, r27
 6e0:	a6 17       	cp	r26, r22
 6e2:	b7 07       	cpc	r27, r23
 6e4:	10 f0       	brcs	.+4      	; 0x6ea <__udivmodhi4_ep>
 6e6:	a6 1b       	sub	r26, r22
 6e8:	b7 0b       	sbc	r27, r23

000006ea <__udivmodhi4_ep>:
 6ea:	88 1f       	adc	r24, r24
 6ec:	99 1f       	adc	r25, r25
 6ee:	5a 95       	dec	r21
 6f0:	a9 f7       	brne	.-22     	; 0x6dc <__udivmodhi4_loop>
 6f2:	80 95       	com	r24
 6f4:	90 95       	com	r25
 6f6:	bc 01       	movw	r22, r24
 6f8:	cd 01       	movw	r24, r26
 6fa:	08 95       	ret

000006fc <atoi>:
 6fc:	fc 01       	movw	r30, r24
 6fe:	88 27       	eor	r24, r24
 700:	99 27       	eor	r25, r25
 702:	e8 94       	clt
 704:	21 91       	ld	r18, Z+
 706:	20 32       	cpi	r18, 0x20	; 32
 708:	e9 f3       	breq	.-6      	; 0x704 <atoi+0x8>
 70a:	29 30       	cpi	r18, 0x09	; 9
 70c:	10 f0       	brcs	.+4      	; 0x712 <atoi+0x16>
 70e:	2e 30       	cpi	r18, 0x0E	; 14
 710:	c8 f3       	brcs	.-14     	; 0x704 <atoi+0x8>
 712:	2b 32       	cpi	r18, 0x2B	; 43
 714:	41 f0       	breq	.+16     	; 0x726 <atoi+0x2a>
 716:	2d 32       	cpi	r18, 0x2D	; 45
 718:	39 f4       	brne	.+14     	; 0x728 <atoi+0x2c>
 71a:	68 94       	set
 71c:	04 c0       	rjmp	.+8      	; 0x726 <atoi+0x2a>
 71e:	0e 94 b2 03 	call	0x764	; 0x764 <__mulhi_const_10>
 722:	82 0f       	add	r24, r18
 724:	91 1d       	adc	r25, r1
 726:	21 91       	ld	r18, Z+
 728:	20 53       	subi	r18, 0x30	; 48
 72a:	2a 30       	cpi	r18, 0x0A	; 10
 72c:	c0 f3       	brcs	.-16     	; 0x71e <atoi+0x22>
 72e:	1e f4       	brtc	.+6      	; 0x736 <atoi+0x3a>
 730:	90 95       	com	r25
 732:	81 95       	neg	r24
 734:	9f 4f       	sbci	r25, 0xFF	; 255
 736:	08 95       	ret

00000738 <itoa>:
 738:	45 32       	cpi	r20, 0x25	; 37
 73a:	51 05       	cpc	r21, r1
 73c:	20 f4       	brcc	.+8      	; 0x746 <itoa+0xe>
 73e:	42 30       	cpi	r20, 0x02	; 2
 740:	10 f0       	brcs	.+4      	; 0x746 <itoa+0xe>
 742:	0c 94 a7 03 	jmp	0x74e	; 0x74e <__itoa_ncheck>
 746:	fb 01       	movw	r30, r22
 748:	10 82       	st	Z, r1
 74a:	cb 01       	movw	r24, r22
 74c:	08 95       	ret

0000074e <__itoa_ncheck>:
 74e:	bb 27       	eor	r27, r27
 750:	4a 30       	cpi	r20, 0x0A	; 10
 752:	31 f4       	brne	.+12     	; 0x760 <__itoa_ncheck+0x12>
 754:	99 23       	and	r25, r25
 756:	22 f4       	brpl	.+8      	; 0x760 <__itoa_ncheck+0x12>
 758:	bd e2       	ldi	r27, 0x2D	; 45
 75a:	90 95       	com	r25
 75c:	81 95       	neg	r24
 75e:	9f 4f       	sbci	r25, 0xFF	; 255
 760:	0c 94 bb 03 	jmp	0x776	; 0x776 <__utoa_common>

00000764 <__mulhi_const_10>:
 764:	7a e0       	ldi	r23, 0x0A	; 10
 766:	97 9f       	mul	r25, r23
 768:	90 2d       	mov	r25, r0
 76a:	87 9f       	mul	r24, r23
 76c:	80 2d       	mov	r24, r0
 76e:	91 0d       	add	r25, r1
 770:	11 24       	eor	r1, r1
 772:	08 95       	ret

00000774 <__utoa_ncheck>:
 774:	bb 27       	eor	r27, r27

00000776 <__utoa_common>:
 776:	fb 01       	movw	r30, r22
 778:	55 27       	eor	r21, r21
 77a:	aa 27       	eor	r26, r26
 77c:	88 0f       	add	r24, r24
 77e:	99 1f       	adc	r25, r25
 780:	aa 1f       	adc	r26, r26
 782:	a4 17       	cp	r26, r20
 784:	10 f0       	brcs	.+4      	; 0x78a <__utoa_common+0x14>
 786:	a4 1b       	sub	r26, r20
 788:	83 95       	inc	r24
 78a:	50 51       	subi	r21, 0x10	; 16
 78c:	b9 f7       	brne	.-18     	; 0x77c <__utoa_common+0x6>
 78e:	a0 5d       	subi	r26, 0xD0	; 208
 790:	aa 33       	cpi	r26, 0x3A	; 58
 792:	08 f0       	brcs	.+2      	; 0x796 <__utoa_common+0x20>
 794:	a9 5d       	subi	r26, 0xD9	; 217
 796:	a1 93       	st	Z+, r26
 798:	00 97       	sbiw	r24, 0x00	; 0
 79a:	79 f7       	brne	.-34     	; 0x77a <__utoa_common+0x4>
 79c:	b1 11       	cpse	r27, r1
 79e:	b1 93       	st	Z+, r27
 7a0:	11 92       	st	Z+, r1
 7a2:	cb 01       	movw	r24, r22
 7a4:	0c 94 04 04 	jmp	0x808	; 0x808 <strrev>

000007a8 <puts>:
 7a8:	0f 93       	push	r16
 7aa:	1f 93       	push	r17
 7ac:	cf 93       	push	r28
 7ae:	df 93       	push	r29
 7b0:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <__iob+0x2>
 7b4:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <__iob+0x3>
 7b8:	23 81       	ldd	r18, Z+3	; 0x03
 7ba:	21 ff       	sbrs	r18, 1
 7bc:	1b c0       	rjmp	.+54     	; 0x7f4 <puts+0x4c>
 7be:	8c 01       	movw	r16, r24
 7c0:	d0 e0       	ldi	r29, 0x00	; 0
 7c2:	c0 e0       	ldi	r28, 0x00	; 0
 7c4:	f8 01       	movw	r30, r16
 7c6:	81 91       	ld	r24, Z+
 7c8:	8f 01       	movw	r16, r30
 7ca:	60 91 2d 01 	lds	r22, 0x012D	; 0x80012d <__iob+0x2>
 7ce:	70 91 2e 01 	lds	r23, 0x012E	; 0x80012e <__iob+0x3>
 7d2:	db 01       	movw	r26, r22
 7d4:	18 96       	adiw	r26, 0x08	; 8
 7d6:	ed 91       	ld	r30, X+
 7d8:	fc 91       	ld	r31, X
 7da:	19 97       	sbiw	r26, 0x09	; 9
 7dc:	88 23       	and	r24, r24
 7de:	31 f0       	breq	.+12     	; 0x7ec <puts+0x44>
 7e0:	09 95       	icall
 7e2:	89 2b       	or	r24, r25
 7e4:	79 f3       	breq	.-34     	; 0x7c4 <puts+0x1c>
 7e6:	df ef       	ldi	r29, 0xFF	; 255
 7e8:	cf ef       	ldi	r28, 0xFF	; 255
 7ea:	ec cf       	rjmp	.-40     	; 0x7c4 <puts+0x1c>
 7ec:	8a e0       	ldi	r24, 0x0A	; 10
 7ee:	09 95       	icall
 7f0:	89 2b       	or	r24, r25
 7f2:	19 f0       	breq	.+6      	; 0x7fa <puts+0x52>
 7f4:	8f ef       	ldi	r24, 0xFF	; 255
 7f6:	9f ef       	ldi	r25, 0xFF	; 255
 7f8:	02 c0       	rjmp	.+4      	; 0x7fe <puts+0x56>
 7fa:	8d 2f       	mov	r24, r29
 7fc:	9c 2f       	mov	r25, r28
 7fe:	df 91       	pop	r29
 800:	cf 91       	pop	r28
 802:	1f 91       	pop	r17
 804:	0f 91       	pop	r16
 806:	08 95       	ret

00000808 <strrev>:
 808:	dc 01       	movw	r26, r24
 80a:	fc 01       	movw	r30, r24
 80c:	67 2f       	mov	r22, r23
 80e:	71 91       	ld	r23, Z+
 810:	77 23       	and	r23, r23
 812:	e1 f7       	brne	.-8      	; 0x80c <strrev+0x4>
 814:	32 97       	sbiw	r30, 0x02	; 2
 816:	04 c0       	rjmp	.+8      	; 0x820 <strrev+0x18>
 818:	7c 91       	ld	r23, X
 81a:	6d 93       	st	X+, r22
 81c:	70 83       	st	Z, r23
 81e:	62 91       	ld	r22, -Z
 820:	ae 17       	cp	r26, r30
 822:	bf 07       	cpc	r27, r31
 824:	c8 f3       	brcs	.-14     	; 0x818 <strrev+0x10>
 826:	08 95       	ret

00000828 <_exit>:
 828:	f8 94       	cli

0000082a <__stop_program>:
 82a:	ff cf       	rjmp	.-2      	; 0x82a <__stop_program>
